

# Starting...
# 350 test suites found.

#  PASS  test\toSnakeCase\toSnakeCase.test.js

ok 1 — toSnakeCase is a Function
ok 2 — toSnakeCase('camelCase') returns camel_case
ok 3 — toSnakeCase('some text') returns some_text
ok 4 — toSnakeCase('some-mixed_string With spaces_underscores-and-hyphens') returns some_mixed_string_with_spaces_underscores_and_hyphens
ok 5 — toSnakeCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') returns i_am_listening_to_fm_while_loading_different_url_on_my_browser_and_also_editing_some_xml_and_html
ok 6 — toSnakeCase() returns undefined
ok 7 — toSnakeCase([]) throws an error
ok 8 — toSnakeCase({}) throws an error
ok 9 — toSnakeCase(123) throws an error
ok 10 — toSnakeCase(IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML) takes less than 2s to run

#  PASS  test\toKebabCase\toKebabCase.test.js

ok 11 — toKebabCase is a Function
ok 12 — toKebabCase('camelCase') returns camel-case
ok 13 — toKebabCase('some text') returns some-text
ok 14 — toKebabCase('some-mixed-string With spaces-underscores-and-hyphens') returns some-mixed-string-with-spaces-underscores-and-hyphens
ok 15 — toKebabCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') returns i-am-listening-to-fm-while-loading-different-url-on-my-browser-and-also-editing-some-xml-and-html
ok 16 — toKebabCase() returns undefined
ok 17 — toKebabCase([]) throws an erro
ok 18 — toKebabCase({}) throws an erro
ok 19 — toKebabCase(123) throws an erro
ok 20 — toKebabCase(IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML) takes less than 2s to run

#  FAIL  test\tomorrow\tomorrow.test.js

ok 21 — tomorrow is a Function
ok 22 — Returns the correct year
ok 23 — Returns the correct month
not ok 24 ● Returns the correct date
#   
#   expect(received).toBe(expected) // Object.is equality
#   
#   
#   Expected: 28
#   
#   Received:
#   
#   Stack:
#   
#       at Object.toBe (test\tomorrow\tomorrow.test.js:16:24)
#   
#             12 | test('Returns the correct month', () => {
#             13 |   expect(t1.getMonth()).toBe(t2.getMonth());
#             14 | });
#             15 | test('Returns the correct date', () => {
#           > 16 |   expect(t1.getDate()).toBe(t2.getDate());
#                |                        ^
#             17 | });
#             18 | 
#   
#       at Object.asyncJestTest (node_modules\jest-jasmine2\build\jasmine_async.js:108:37)
#   
#             104 |     const asyncJestTest = function(done) {
#             105 |       const wrappedFn = (0, _isGeneratorFn2.default)(fn)
#             106 |         ? _co2.default.wrap(fn)
#             107 |         : fn;
#           > 108 |       const returnValue = wrappedFn.call({});
#                 |                                     ^
#             109 | 
#             110 |       if (isPromise(returnValue)) {
#             111 |         returnValue.then(done.bind(null, null), error => {
#   
#       at resolve (node_modules\jest-jasmine2\build\queue_runner.js:56:12)
#   
#             52 |         options.fail.apply(null, arguments);
#             53 |         resolve();
#             54 |       };
#             55 |       try {
#           > 56 |         fn.call(options.userContext, next);
#                |            ^
#             57 |       } catch (e) {
#             58 |         options.onException(e);
#             59 |         resolve();
#   
#           at new Promise (<anonymous>)
#       at mapper (node_modules\jest-jasmine2\build\queue_runner.js:43:19)
#   
#             39 |       timeout = _ref.timeout;
#             40 |     var _ref$initError = _ref.initError;
#             41 |     let initError = _ref$initError === undefined ? new Error() : _ref$initError;
#             42 | 
#           > 43 |     let promise = new Promise(resolve => {
#                |                   ^
#             44 |       const next = function(err) {
#             45 |         if (err) {
#             46 |           options.fail.apply(null, arguments);
#   
#       at promise.then (node_modules\jest-jasmine2\build\queue_runner.js:87:41)
#   
#             83 |     );
#             84 |   };
#             85 | 
#             86 |   const result = options.queueableFns.reduce(
#           > 87 |     (promise, fn) => promise.then(() => mapper(fn)),
#                |                                         ^
#             88 |     Promise.resolve()
#             89 |   );
#             90 | 
#   
#           at <anonymous>
#       at process._tickCallback (internal\process\next_tick.js:188:7)

#  PASS  test\reject\reject.test.js

ok 25 — reject is a Function
ok 26 — Works with numbers
ok 27 — Works with strings

#  PASS  test\toggleClass\toggleClass.test.js

ok 28 — toggleClass is a Function

#  PASS  test\groupBy\groupBy.test.js

ok 29 — groupBy is a Function
ok 30 — Groups the elements of an array based on the given function
ok 31 — Groups the elements of an array based on the given function

#  PASS  test\average\average.test.js

ok 32 — average is a Function
ok 33 — average(true) returns 0
ok 34 — average(false) returns 1
ok 35 — average(9, 1) returns 5
ok 36 — average(153, 44, 55, 64, 71, 1122, 322774, 2232, 23423, 234, 3631) returns 32163.909090909092 
ok 37 — average(1, 2, 3) returns 2
ok 38 — average(null) returns 0
ok 39 — average(1, 2, 3) returns NaN
ok 40 — average(String) returns NaN
ok 41 — average({ a: 123}) returns NaN
ok 42 — average([undefined, 0, string]) returns NaN
ok 43 — average([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test\isAbsoluteURL\isAbsoluteURL.test.js

ok 44 — isAbsoluteURL is a Function
ok 45 — Given string is an absolute URL
ok 46 — Given string is an absolute URL
ok 47 — Given string is not an absolute URL

#  PASS  test\UUIDGeneratorBrowser\UUIDGeneratorBrowser.test.js

ok 48 — UUIDGeneratorBrowser is a Function

#  PASS  test\levenshteinDistance\levenshteinDistance.test.js

ok 49 — levenshteinDistance is a Function

#  PASS  test\httpPut\httpPut.test.js

ok 50 — httpPut is a Function

#  PASS  test\digitize\digitize.test.js

ok 51 — digitize is a Function
ok 52 — Converts a number to an array of digits

#  PASS  test\unary\unary.test.js

ok 53 — unary is a Function
ok 54 — Discards arguments after the first one

#  PASS  test\invertKeyValues\invertKeyValues.test.js

ok 55 — invertKeyValues is a Function
ok 56 — invertKeyValues({ a: 1, b: 2, c: 1 }) returns { 1: [ 'a', 'c' ], 2: [ 'b' ] }
ok 57 — invertKeyValues({ a: 1, b: 2, c: 1 }, value => 'group' + value) returns { group1: [ 'a', 'c' ], group2: [ 'b' ] }

#  PASS  test\pipeFunctions\pipeFunctions.test.js

ok 58 — pipeFunctions is a Function
ok 59 — Performs left-to-right function composition

#  PASS  test\reverseString\reverseString.test.js

ok 60 — reverseString is a Function
ok 61 — Reverses a string.

#  PASS  test\minBy\minBy.test.js

ok 62 — minBy is a Function
ok 63 — Produces the right result with a function
ok 64 — Produces the right result with a property name

#  PASS  test\isTypedArray\isTypedArray.test.js

ok 65 — isTypedArray is a Function

#  PASS  test\permutations\permutations.test.js

ok 66 — permutations is a Function
ok 67 — Generates all permutations of an array

#  PASS  test\isFunction\isFunction.test.js

ok 68 — isFunction is a Function
ok 69 — passed value is a function
ok 70 — passed value is not a function

#  PASS  test\filterNonUnique\filterNonUnique.test.js

ok 71 — filterNonUnique is a Function
ok 72 — Filters out the non-unique values in an array

#  PASS  test\isArrayBuffer\isArrayBuffer.test.js

ok 73 — isArrayBuffer is a Function

#  PASS  test\isNil\isNil.test.js

ok 74 — isNil is a Function
ok 75 — Returns true for null
ok 76 — Returns true for undefined
ok 77 — Returns false for an empty string

#  PASS  test\isPrime\isPrime.test.js

ok 78 — isPrime is a Function
ok 79 — passed number is a prime

#  PASS  test\everyNth\everyNth.test.js

ok 80 — everyNth is a Function
ok 81 — Returns every nth element in an array

#  PASS  test\fibonacci\fibonacci.test.js

ok 82 — fibonacci is a Function
ok 83 — Generates an array, containing the Fibonacci sequence

#  PASS  test\pickBy\pickBy.test.js

ok 84 — pickBy is a Function
ok 85 — Creates an object composed of the properties the given function returns truthy for.

#  PASS  test\isSet\isSet.test.js

ok 86 — isSet is a Function

#  PASS  test\zipObject\zipObject.test.js

ok 87 — zipObject is a Function
ok 88 — zipObject([a, b, c], [1, 2]) returns {a: 1, b: 2, c: undefined}
ok 89 — zipObject([a, b], [1, 2, 3]) returns {a: 1, b: 2}
ok 90 — zipObject([a, b, c], string) returns { a: s, b: t, c: r }
ok 91 — zipObject([a], string) returns { a: s }
ok 92 — zipObject() throws an error
ok 93 — zipObject((['string'], null) throws an error
ok 94 — zipObject(null, [1]) throws an error
ok 95 — zipObject('string') throws an error
ok 96 — zipObject('test', 'string') throws an error

#  PASS  test\overArgs\overArgs.test.js

ok 97 — overArgs is a Function
ok 98 — Invokes the provided function with its arguments transformed

#  PASS  test\JSONToFile\JSONToFile.test.js

ok 99 — JSONToFile is a Function

#  PASS  test\off\off.test.js

ok 100 — off is a Function

#  PASS  test\omitBy\omitBy.test.js

ok 101 — omitBy is a Function
ok 102 — Creates an object composed of the properties the given function returns falsey for

#  PASS  test\flatten\flatten.test.js

ok 103 — flatten is a Function
ok 104 — Flattens an array
ok 105 — Flattens an array

#  PASS  test\forOwnRight\forOwnRight.test.js

ok 106 — forOwnRight is a Function
ok 107 — Iterates over an element's key-value pairs in reverse

#  PASS  test\uniqueSymmetricDifference\uniqueSymmetricDifference.test.js

ok 108 — uniqueSymmetricDifference is a Function
ok 109 — Returns the symmetric difference between two arrays.
ok 110 — Does not return duplicates from one array

#  PASS  test\toCamelCase\toCamelCase.test.js

ok 111 — toCamelCase is a Function
ok 112 — toCamelCase('some_database_field_name') returns someDatabaseFieldName
ok 113 — toCamelCase('Some label that needs to be camelized') returns someLabelThatNeedsToBeCamelized
ok 114 — toCamelCase('some-javascript-property') return someJavascriptProperty
ok 115 — toCamelCase('some-mixed_string with spaces_underscores-and-hyphens') returns someMixedStringWithSpacesUnderscoresAndHyphens
ok 116 — toCamelCase() throws a error
ok 117 — toCamelCase([]) throws a error
ok 118 — toCamelCase({}) throws a error
ok 119 — toCamelCase(123) throws a error
ok 120 — toCamelCase(some-mixed_string with spaces_underscores-and-hyphens) takes less than 2s to run

#  PASS  test\atob\atob.test.js

ok 121 — atob is a Function
ok 122 — atob("Zm9vYmFy") equals "foobar"
ok 123 — atob("Z") returns ""

#  PASS  test\isObject\isObject.test.js

ok 124 — isObject is a Function
ok 125 — isObject([1, 2, 3, 4]) is a object
ok 126 — isObject([]) is a object
ok 127 — isObject({ a:1 }) is a object
ok 128 — isObject(true) is not a object

#  PASS  test\pad\pad.test.js

ok 129 — pad is a Function
ok 130 — cat is padded on both sides
ok 131 — length of string is 8
ok 132 — pads 42 with "0"
ok 133 — does not truncates if string exceeds length

#  PASS  test\inRange\inRange.test.js

ok 134 — inRange is a Function
ok 135 — The given number falls within the given range
ok 136 — The given number falls within the given range
ok 137 — The given number does not falls within the given range
ok 138 — The given number does not falls within the given range

#  PASS  test\allEqual\allEqual.test.js

ok 139 — allEqual is a Function
ok 140 — Truthy numbers
ok 141 — Falsy numbers
ok 142 — Truthy strings
ok 143 — Falsy numbers
ok 144 — Truthy trues
ok 145 — Truthy falses
ok 146 — Falsy trues
ok 147 — Falsy falses

#  PASS  test\cloneRegExp\cloneRegExp.test.js

ok 148 — cloneRegExp is a Function
ok 149 — Clones regular expressions properly

#  PASS  test\pullBy\pullBy.test.js

ok 150 — pullBy is a Function
ok 151 — Pulls the specified values

#  PASS  test\mask\mask.test.js

ok 152 — mask is a Function
ok 153 — Replaces all but the last num of characters with the specified mask character
ok 154 — Replaces all but the last num of characters with the specified mask character
ok 155 — Replaces all but the last num of characters with the specified mask character

#  PASS  test\without\without.test.js

ok 156 — without is a Function
ok 157 — without([2, 1, 2, 3], 1, 2) returns [3]
ok 158 — without([]) returns []
ok 159 — without([3, 1, true, '3', true], '3', true) returns [3, 1]
ok 160 — without('string'.split(''), 's', 't', 'g') returns ['r', 'i', 'n']
ok 161 — without() throws an error
ok 162 — without(null) throws an error
ok 163 — without(undefined) throws an error
ok 164 — without(123) throws an error
ok 165 — without({}) throws an error

#  PASS  test\defaults\defaults.test.js

ok 166 — defaults is a Function
ok 167 — Assigns default values for undefined properties

#  PASS  test\isEmpty\isEmpty.test.js

ok 168 — isEmpty is a Function
ok 169 — Returns true for empty Map
ok 170 — Returns true for empty Set
ok 171 — Returns true for empty array
ok 172 — Returns true for empty object
ok 173 — Returns true for empty string
ok 174 — Returns false for non-empty array
ok 175 — Returns false for non-empty object
ok 176 — Returns false for non-empty string
ok 177 — Returns true - type is not considered a collection
ok 178 — Returns true - type is not considered a collection

#  PASS  test\get\get.test.js

ok 179 — get is a Function
ok 180 — Retrieve a property indicated by the selector from an object.

#  PASS  test\lcm\lcm.test.js

ok 181 — lcm is a Function
ok 182 — Returns the least common multiple of two or more numbers.
ok 183 — Returns the least common multiple of two or more numbers.

#  PASS  test\uniqueElements\uniqueElements.test.js

ok 184 — uniqueElements is a Function
ok 185 — uniqueElements([1, 2, 2, 3, 4, 4, 5]) returns [1,2,3,4,5]
ok 186 — uniqueElements([1, 23, 53]) returns [1, 23, 53]
ok 187 — uniqueElements([true, 0, 1, false, false, undefined, null, '']) returns [true, 0, 1, false, false, undefined, null, '']
ok 188 — uniqueElements() returns []
ok 189 — uniqueElements(null) returns []
ok 190 — uniqueElements(undefined) returns []
ok 191 — uniqueElements('strt') returns ['s', 't', 'r']
ok 192 — uniqueElements(1, 1, 2543, 534, 5) throws an error
ok 193 — uniqueElements({}) throws an error
ok 194 — uniqueElements(true) throws an error
ok 195 — uniqueElements(false) throws an error
ok 196 — uniqueElements([true, 0, 1, false, false, undefined, null]) takes less than 2s to run

#  PASS  test\decapitalize\decapitalize.test.js

ok 197 — decapitalize is a Function
ok 198 — Works with default parameter
ok 199 — Works with second parameter set to true

#  PASS  test\partial\partial.test.js

ok 200 — partial is a Function
ok 201 — Prepends arguments

#  PASS  test\sdbm\sdbm.test.js

ok 202 — sdbm is a Function
ok 203 — Hashes the input string into a whole number.

#  PASS  test\composeRight\composeRight.test.js

ok 204 — composeRight is a Function
ok 205 — Performs left-to-right function composition

#  PASS  test\orderBy\orderBy.test.js

ok 206 — orderBy is a Function
ok 207 — Returns a sorted array of objects ordered by properties and orders.
ok 208 — Returns a sorted array of objects ordered by properties and orders.

#  PASS  test\remove\remove.test.js

ok 209 — remove is a Function
ok 210 — Removes elements from an array for which the given function returns false

#  PASS  test\yesNo\yesNo.test.js

ok 211 — yesNo is a Function
ok 212 — yesNo(Y) returns true
ok 213 — yesNo(yes) returns true
ok 214 — yesNo(foo, true) returns true
ok 215 — yesNo(No) returns false
ok 216 — yesNo() returns false
ok 217 — yesNo(null) returns false
ok 218 — yesNo(undefined) returns false
ok 219 — yesNo([123, null]) returns false
ok 220 — yesNo([Yes, No]) returns false
ok 221 — yesNo({ 2: Yes }) returns false
ok 222 — yesNo([Yes, No], true) returns true
ok 223 — yesNo({ 2: Yes }, true) returns true

#  PASS  test\btoa\btoa.test.js

ok 224 — btoa is a Function
ok 225 — btoa("foobar") equals "Zm9vYmFy"

#  PASS  test\stringPermutations\stringPermutations.test.js

ok 226 — stringPermutations is a Function
ok 227 — Generates all stringPermutations of a string
ok 228 — Works for single-letter strings
ok 229 — Works for empty strings

#  PASS  test\hasFlags\hasFlags.test.js

ok 230 — hasFlags is a Function

#  PASS  test\isWeakMap\isWeakMap.test.js

ok 231 — isWeakMap is a Function

#  PASS  test\runAsync\runAsync.test.js

ok 232 — runAsync is a Function

#  PASS  test\sleep\sleep.test.js

ok 233 — sleep is a Function
ok 234 — Works as expected

#  PASS  test\sampleSize\sampleSize.test.js

ok 235 — sampleSize is a Function
ok 236 — Returns a single element without n specified
ok 237 — Returns a random sample of specified size from an array
ok 238 — Returns all elements in an array if n >= length
ok 239 — Returns an empty array if original array is empty
ok 240 — Returns an empty array if n = 0

#  PASS  test\when\when.test.js

ok 241 — when is a Function
ok 242 — Returns the proper result
ok 243 — Returns the proper result

#  PASS  test\isNumber\isNumber.test.js

ok 244 — isNumber is a Function
ok 245 — passed argument is a number
ok 246 — passed argument is not a number

#  PASS  test\negate\negate.test.js

ok 247 — negate is a Function
ok 248 — Negates a predicate function

#  PASS  test\escapeHTML\escapeHTML.test.js

ok 249 — escapeHTML is a Function
ok 250 — Escapes a string for use in HTML

#  PASS  test\takeWhile\takeWhile.test.js

ok 251 — takeWhile is a Function
ok 252 — Removes elements until the function returns true

#  PASS  test\arrayToCSV\arrayToCSV.test.js

ok 253 — arrayToCSV is a Function
ok 254 — arrayToCSV works with default delimiter
ok 255 — arrayToCSV works with custom delimiter

#  PASS  test\collectInto\collectInto.test.js

ok 256 — collectInto is a Function
ok 257 — Works with multiple promises

#  PASS  test\isBrowser\isBrowser.test.js

ok 258 — isBrowser is a Function

#  PASS  test\omit\omit.test.js

ok 259 — omit is a Function
ok 260 — Omits the key-value pairs corresponding to the given keys from an object

#  PASS  test\isSorted\isSorted.test.js

ok 261 — isSorted is a Function
ok 262 — Array is sorted in ascending order
ok 263 — Array is sorted in ascending order
ok 264 — Array is sorted in ascending order
ok 265 — Array is sorted in ascending order
ok 266 — Array is sorted in descending order
ok 267 — Array is sorted in descending order
ok 268 — Array is sorted in descending order
ok 269 — Array is sorted in descending order
ok 270 — Array is empty
ok 271 — Array is not sorted, direction changed in array
ok 272 — Array is not sorted, direction changed in array

#  PASS  test\head\head.test.js

ok 273 — head is a Function
ok 274 — head({ a: 1234}) returns undefined
ok 275 — head([1, 2, 3]) returns 1
ok 276 — head({ 0: false}) returns false
ok 277 — head(String) returns S
ok 278 — head(null) throws an Error
ok 279 — head(undefined) throws an Error
ok 280 — head() throws an Error
ok 281 — head([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test\httpDelete\httpDelete.test.js

ok 282 — httpDelete is a Function

#  PASS  test\stripHTMLTags\stripHTMLTags.test.js

ok 283 — stripHTMLTags is a Function
ok 284 — Removes HTML tags

#  PASS  test\equals\equals.test.js

ok 285 — equals is a Function
ok 286 — { a: [2, {e: 3}], b: [4], c: 'foo' } is equal to { a: [2, {e: 3}], b: [4], c: 'foo' }
ok 287 — [1,2,3] is equal to [1,2,3]
ok 288 — { a: [2, 3], b: [4] } is not equal to { a: [2, 3], b: [6] }
ok 289 — [1,2,3] is not equal to [1,2,4]
ok 290 — [1, 2, 3] should be equal to { 0: 1, 1: 2, 2: 3 }) - type is different, but their enumerable properties match.

#  PASS  test\countOccurrences\countOccurrences.test.js

ok 291 — countOccurrences is a Function
ok 292 — Counts the occurrences of a value in an array

#  PASS  test\bind\bind.test.js

ok 293 — bind is a Function
ok 294 — Binds to an object context

#  PASS  test\sortedIndex\sortedIndex.test.js

ok 295 — sortedIndex is a Function
ok 296 — Returns the lowest index at which value should be inserted into array in order to maintain its sort order.
ok 297 — Returns the lowest index at which value should be inserted into array in order to maintain its sort order.

#  PASS  test\toCurrency\toCurrency.test.js

ok 298 — toCurrency is a Function
ok 299 — currency: Euro | currencyLangFormat: Local
ok 300 —  currency: US Dollar | currencyLangFormat: English (United States)
ok 301 — currency: Japanese Yen | currencyLangFormat: Local

#  PASS  test\toSafeInteger\toSafeInteger.test.js

ok 302 — toSafeInteger is a Function
ok 303 — Number(toSafeInteger(3.2)) is a number
ok 304 — Converts a value to a safe integer
ok 305 — toSafeInteger('4.2') returns 4
ok 306 — toSafeInteger(4.6) returns 5
ok 307 — toSafeInteger([]) returns 0
ok 308 — isNaN(toSafeInteger([1.5, 3124])) is true
ok 309 — isNaN(toSafeInteger('string')) is true
ok 310 — isNaN(toSafeInteger({})) is true
ok 311 — isNaN(toSafeInteger()) is true
ok 312 — toSafeInteger(Infinity) returns 9007199254740991
ok 313 — toSafeInteger(3.2) takes less than 2s to run

#  PASS  test\stableSort\stableSort.test.js

ok 314 — stableSort is a Function
ok 315 — Array is properly sorted

#  PASS  test\JSONtoCSV\JSONtoCSV.test.js

ok 316 — JSONtoCSV is a Function
ok 317 — JSONtoCSV works with default delimiter
ok 318 — JSONtoCSV works with custom delimiter

#  PASS  test\initializeArrayWithValues\initializeArrayWithValues.test.js

ok 319 — initializeArrayWithValues is a Function
ok 320 — Initializes and fills an array with the specified values

#  PASS  test\removeNonASCII\removeNonASCII.test.js

ok 321 — removeNonASCII is a Function
ok 322 — Removes non-ASCII characters

#  PASS  test\merge\merge.test.js

ok 323 — merge is a Function
ok 324 — Merges two objects

#  PASS  test\unionWith\unionWith.test.js

ok 325 — unionWith is a Function
ok 326 — Produces the appropriate results

#  PASS  test\hashBrowser\hashBrowser.test.js

ok 327 — hashBrowser is a Function

#  PASS  test\intersectionBy\intersectionBy.test.js

ok 328 — intersectionBy is a Function
ok 329 — Returns a list of elements that exist in both arrays, after applying the provided function to each array element of both

#  PASS  test\UUIDGeneratorNode\UUIDGeneratorNode.test.js

ok 330 — UUIDGeneratorNode is a Function
ok 331 — Contains dashes in the proper places
ok 332 — Only contains hexadecimal digits

#  PASS  test\findLast\findLast.test.js

ok 333 — findLast is a Function
ok 334 — Finds last element for which the given function returns true

#  PASS  test\colorize\colorize.test.js

ok 335 — colorize is a Function

#  PASS  test\isUndefined\isUndefined.test.js

ok 336 — isUndefined is a Function
ok 337 — Returns true for undefined

#  PASS  test\all\all.test.js

ok 338 — all is a Function
ok 339 — Returns true for arrays with no falsey values
ok 340 — Returns false for arrays with 0
ok 341 — Returns false for arrays with NaN
ok 342 — Returns false for arrays with undefined
ok 343 — Returns false for arrays with null
ok 344 — Returns false for arrays with empty strings
ok 345 — Returns true with predicate function
ok 346 — Returns false with a predicate function

#  PASS  test\onUserInputChange\onUserInputChange.test.js

ok 347 — onUserInputChange is a Function

#  PASS  test\unzipWith\unzipWith.test.js

ok 348 — unzipWith is a Function
ok 349 — unzipWith([[1, 10, 100], [2, 20, 200]], (...args) => args.reduce((acc, v) => acc + v, 0)) equals [3, 30, 300]

#  PASS  test\luhnCheck\luhnCheck.test.js

ok 350 — luhnCheck is a Function
ok 351 — validates identification number
ok 352 — validates identification number
ok 353 — validates identification number

#  PASS  test\shank\shank.test.js

ok 354 — shank is a Function
ok 355 — Returns an array with the added elements.
ok 356 — Returns an array with the removed elements.
ok 357 — Does not mutate the original array

#  PASS  test\truncateString\truncateString.test.js

ok 358 — truncateString is a Function
ok 359 — Truncates a "boomerang" up to a specified length.

#  PASS  test\isString\isString.test.js

ok 360 — isString is a Function
ok 361 — foo is a string
ok 362 — "10" is a string
ok 363 — Empty string is a string
ok 364 — 10 is not a string
ok 365 — true is not string

#  PASS  test\collatz\collatz.test.js

ok 366 — collatz is a Function
ok 367 — When n is even, divide by 2
ok 368 — When n is odd, times by 3 and add 1
ok 369 — Eventually reaches 1

#  PASS  test\smoothScroll\smoothScroll.test.js

ok 370 — smoothScroll is a Function

#  PASS  test\insertAfter\insertAfter.test.js

ok 371 — insertAfter is a Function

#  PASS  test\chunk\chunk.test.js

ok 372 — chunk is a Function
ok 373 — chunk([1, 2, 3, 4, 5], 2) returns [[1,2],[3,4],[5]] 
ok 374 — chunk([]) returns []
ok 375 — chunk(123) returns []
ok 376 — chunk({ a: 123}) returns []
ok 377 — chunk(string, 2) returns [ st, ri, ng ]
ok 378 — chunk() throws an error
ok 379 — chunk(undefined) throws an error
ok 380 — chunk(null) throws an error
ok 381 — chunk(This is a string, 2) takes less than 2s to run

#  PASS  test\capitalizeEveryWord\capitalizeEveryWord.test.js

ok 382 — capitalizeEveryWord is a Function
ok 383 — Capitalizes the first letter of every word in a string
ok 384 — Works with characters
ok 385 — Works with one word string

#  PASS  test\hasClass\hasClass.test.js

ok 386 — hasClass is a Function

#  PASS  test\takeRight\takeRight.test.js

ok 387 — takeRight is a Function
ok 388 — Returns an array with n elements removed from the end
ok 389 — Returns an array with n elements removed from the end

#  PASS  test\longestItem\longestItem.test.js

ok 390 — longestItem is a Function
ok 391 — Returns the longest object from plain values
ok 392 — Returns the longest object from a spread array
ok 393 — Returns the longest object from mixed input
ok 394 — Returns the longest array
ok 395 — Returns the longest object when comparing arrays and strings
ok 396 — Returns undefined without any input
ok 397 — Returns first found of all similar
ok 398 — Throws TypeError if all inputs are undefined

#  PASS  test\words\words.test.js

ok 399 — words is a Function
ok 400 — words('I love javaScript!!') returns [I, love, javaScript]
ok 401 — words('python, javaScript & coffee') returns [python, javaScript, coffee]
ok 402 — words(I love javaScript!!) returns an array
ok 403 — words() throws an error
ok 404 — words(null) throws an error
ok 405 — words(undefined) throws an error
ok 406 — words({}) throws an error
ok 407 — words([]) throws an error
ok 408 — words(1234) throws an error

#  PASS  test\getType\getType.test.js

ok 409 — getType is a Function
ok 410 — Returns the native type of a value

#  PASS  test\unfold\unfold.test.js

ok 411 — unfold is a Function
ok 412 — Works with a given function, producing an array

#  PASS  test\matchesWith\matchesWith.test.js

ok 413 — matchesWith is a Function
ok 414 — Returns true for two objects with similar values, based on the provided function

#  PASS  test\recordAnimationFrames\recordAnimationFrames.test.js

ok 415 — recordAnimationFrames is a Function

#  PASS  test\hashNode\hashNode.test.js

ok 416 — hashNode is a Function
ok 417 — Produces the appropriate hash

#  PASS  test\RGBToHex\RGBToHex.test.js

ok 418 — RGBToHex is a Function
ok 419 — Converts the values of RGB components to a color code.

#  PASS  test\httpPost\httpPost.test.js

ok 420 — httpPost is a Function

#  PASS  test\functions\functions.test.js

ok 421 — functions is a Function
ok 422 — Returns own methods
ok 423 — Returns own and inherited methods

#  PASS  test\factors\factors.test.js

ok 424 — factors is a Function

#  PASS  test\palindrome\palindrome.test.js

ok 425 — palindrome is a Function
ok 426 — Given string is a palindrome
ok 427 — Given string is not a palindrome

#  PASS  test\currentURL\currentURL.test.js

ok 428 — currentURL is a Function

#  PASS  test\pluralize\pluralize.test.js

ok 429 — pluralize is a Function
ok 430 — Produces the plural of the word
ok 431 — Produces the singular of the word
ok 432 — Produces the plural of the word
ok 433 — Prodices the defined plural of the word
ok 434 — Works with a dictionary

#  PASS  test\union\union.test.js

ok 435 — union is a Function
ok 436 — union([1, 2, 3], [4, 3, 2]) returns [1, 2, 3, 4]
ok 437 — union('str', 'asd') returns [ 's', 't', 'r', 'a', 'd' ]
ok 438 — union([[], {}], [1, 2, 3]) returns [[], {}, 1, 2, 3]
ok 439 — union([], []) returns []
ok 440 — union() throws an error
ok 441 — union(true, 'str') throws an error
ok 442 — union('false', true) throws an error
ok 443 — union((123, {}) throws an error
ok 444 — union([], {}) throws an error
ok 445 — union(undefined, null) throws an error
ok 446 — union([1, 2, 3], [4, 3, 2]) takes less than 2s to run

#  PASS  test\mostPerformant\mostPerformant.test.js

ok 447 — mostPerformant is a Function

#  PASS  test\shuffle\shuffle.test.js

ok 448 — shuffle is a Function
ok 449 — Shuffles the array
ok 450 — New array contains all original elements
ok 451 — Works for empty arrays
ok 452 — Works for single-element arrays

#  PASS  test\elementContains\elementContains.test.js

ok 453 — elementContains is a Function

#  PASS  test\quickSort\quickSort.test.js

ok 454 — quickSort is a Function
ok 455 — quickSort([5, 6, 4, 3, 1, 2]) returns [1, 2, 3, 4, 5, 6]
ok 456 — quickSort([-1, 0, -2]) returns [-2, -1, 0]
ok 457 — quickSort() throws an error
ok 458 — quickSort(123) throws an error
ok 459 — quickSort({ 234: string}) throws an error
ok 460 — quickSort(null) throws an error
ok 461 — quickSort(undefined) throws an error
ok 462 — quickSort([11, 1, 324, 23232, -1, 53, 2, 524, 32, 13, 156, 133, 62, 12, 4]) takes less than 2s to run

#  PASS  test\memoize\memoize.test.js

ok 463 — memoize is a Function
ok 464 — Function works properly
ok 465 — Function works properly
ok 466 — Cache stores values

#  PASS  test\forEachRight\forEachRight.test.js

ok 467 — forEachRight is a Function
ok 468 — Iterates over the array in reverse

#  PASS  test\bottomVisible\bottomVisible.test.js

ok 469 — bottomVisible is a Function

#  PASS  test\httpsRedirect\httpsRedirect.test.js

ok 470 — httpsRedirect is a Function

#  PASS  test\byteSize\byteSize.test.js

ok 471 — byteSize is a Function
ok 472 — Works for a single letter
ok 473 — Works for a common string
ok 474 — Works for emoji

#  PASS  test\pullAtValue\pullAtValue.test.js

ok 475 — pullAtValue is a Function
ok 476 — Pulls the specified values
ok 477 — Pulls the specified values

#  PASS  test\dropRight\dropRight.test.js

ok 478 — dropRight is a Function
ok 479 — Returns a new array with n elements removed from the right
ok 480 — Returns a new array with n elements removed from the right
ok 481 — Returns a new array with n elements removed from the right

#  PASS  test\reduceWhich\reduceWhich.test.js

ok 482 — reduceWhich is a Function
ok 483 — Returns the minimum of an array
ok 484 — Returns the maximum of an array
ok 485 — Returns the object with the minimum specified value in an array

#  PASS  test\shallowClone\shallowClone.test.js

ok 486 — shallowClone is a Function
ok 487 — Shallow cloning works
ok 488 — Does not clone deeply

#  PASS  test\isValidJSON\isValidJSON.test.js

ok 489 — isValidJSON is a Function
ok 490 — {"name":"Adam","age":20} is a valid JSON
ok 491 — {"name":"Adam",age:"20"} is not a valid JSON
ok 492 — null is a valid JSON

#  PASS  test\unflattenObject\unflattenObject.test.js

ok 493 — unflattenObject is a Function
ok 494 — Unflattens an object with the paths for keys

#  PASS  test\URLJoin\URLJoin.test.js

ok 495 — URLJoin is a Function
ok 496 — Returns proper URL
ok 497 — Returns proper URL

#  PASS  test\isDivisible\isDivisible.test.js

ok 498 — isDivisible is a Function
ok 499 — The number 6 is divisible by 3

#  PASS  test\curry\curry.test.js

ok 500 — curry is a Function
ok 501 — curries a Math.pow
ok 502 — curries a Math.min

#  PASS  test\reduceSuccessive\reduceSuccessive.test.js

ok 503 — reduceSuccessive is a Function
ok 504 — Returns the array of successively reduced values

#  PASS  test\compact\compact.test.js

ok 505 — compact is a Function
ok 506 — Removes falsey values from an array

#  PASS  test\bifurcateBy\bifurcateBy.test.js

ok 507 — bifurcateBy is a Function
ok 508 — Splits the collection into two groups

#  PASS  test\binarySearch\binarySearch.test.js

ok 509 — binarySearch is a Function
ok 510 — Finds item in array
ok 511 — Returns -1 when not found
ok 512 — Works with empty arrays
ok 513 — Works for one element arrays

#  PASS  test\flip\flip.test.js

ok 514 — flip is a Function
ok 515 — Flips argument order

#  PASS  test\powerset\powerset.test.js

ok 516 — powerset is a Function
ok 517 — Returns the powerset of a given array of numbers.

#  PASS  test\debounce\debounce.test.js

ok 518 — debounce is a Function
ok 519 — Works as expected

#  PASS  test\difference\difference.test.js

ok 520 — difference is a Function
ok 521 — Returns the difference between two arrays

#  PASS  test\converge\converge.test.js

ok 522 — converge is a Function
ok 523 — Produces the average of the array
ok 524 — Produces the strange concatenation

#  PASS  test\capitalize\capitalize.test.js

ok 525 — capitalize is a Function
ok 526 — Capitalizes the first letter of a string
ok 527 — Capitalizes the first letter of a string
ok 528 — Works with characters
ok 529 — "Works with single character words

#  PASS  test\fibonacciUntilNum\fibonacciUntilNum.test.js

ok 530 — fibonacciUntilNum is a Function

#  PASS  test\throttle\throttle.test.js

ok 531 — throttle is a Function

#  PASS  test\detectDeviceType\detectDeviceType.test.js

ok 532 — detectDeviceType is a Function

#  PASS  test\last\last.test.js

ok 533 — last is a Function
ok 534 — last({ a: 1234}) returns undefined
ok 535 — last([1, 2, 3]) returns 3
ok 536 — last({ 0: false}) returns undefined
ok 537 — last(String) returns g
ok 538 — last(null) throws an Error
ok 539 — last(undefined) throws an Error
ok 540 — last() throws an Error
ok 541 — last([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test\extendHex\extendHex.test.js

ok 542 — extendHex is a Function
ok 543 — Extends a 3-digit color code to a 6-digit color code
ok 544 — Extends a 3-digit color code to a 6-digit color code

#  PASS  test\isSymbol\isSymbol.test.js

ok 545 — isSymbol is a Function
ok 546 — Checks if the given argument is a symbol

#  PASS  test\maxN\maxN.test.js

ok 547 — maxN is a Function
ok 548 — Returns the n maximum elements from the provided array
ok 549 — Returns the n maximum elements from the provided array

#  PASS  test\toHash\toHash.test.js

ok 550 — toHash is a Function

#  PASS  test\none\none.test.js

ok 551 — none is a Function
ok 552 — Returns true for arrays with no truthy values
ok 553 — Returns false for arrays with at least one truthy value
ok 554 — Returns true with a predicate function
ok 555 — Returns false with predicate function

#  PASS  test\degreesToRads\degreesToRads.test.js

ok 556 — degreesToRads is a Function
ok 557 — Returns the appropriate value

#  PASS  test\renameKeys\renameKeys.test.js

ok 558 — renameKeys is a Function
ok 559 — renameKeys is a Function

#  PASS  test\call\call.test.js

ok 560 — call is a Function
ok 561 — Calls function on given object

#  PASS  test\once\once.test.js

ok 562 — once is a Function

#  PASS  test\getStyle\getStyle.test.js

ok 563 — getStyle is a Function

#  PASS  test\initializeNDArray\initializeNDArray.test.js

ok 564 — initializeNDArray is a Function

#  PASS  test\indentString\indentString.test.js

ok 565 — indentString is a Function
ok 566 — indentString is a Function
ok 567 — indentString is a Function

#  PASS  test\isArray\isArray.test.js

ok 568 — isArray is a Function
ok 569 — passed value is an array
ok 570 — passed value is not an array

#  PASS  test\objectFromPairs\objectFromPairs.test.js

ok 571 — objectFromPairs is a Function
ok 572 — Creates an object from the given key-value pairs.

#  PASS  test\counter\counter.test.js

ok 573 — counter is a Function

#  PASS  test\randomNumberInRange\randomNumberInRange.test.js

ok 574 — randomNumberInRange is a Function
ok 575 — The returned value is a number
ok 576 — The returned value lies between provided lowerLimit and upperLimit (both inclusive).

#  PASS  test\tail\tail.test.js

ok 577 — tail is a Function
ok 578 — Returns tail
ok 579 — Returns tail

#  PASS  test\deepFreeze\deepFreeze.test.js

ok 580 — deepFreeze is a Function
ok 581 — modifying deeply freezed object prop throws an error in strict mode
ok 582 — should not modify deeply freezed object inside another object
ok 583 — should not add prop to deeply freezed empty object

#  PASS  test\uniqueElementsByRight\uniqueElementsByRight.test.js

ok 584 — uniqueElementsByRight is a Function
ok 585 — uniqueElementsByRight works for properties
ok 586 — uniqueElementsByRight works for nested properties

#  PASS  test\setStyle\setStyle.test.js

ok 587 — setStyle is a Function

#  PASS  test\hz\hz.test.js

ok 588 — hz is a Function

#  PASS  test\isArmstrongNumber\isArmstrongNumber.test.js

ok 589 — isArmstrongNumber is a Function

#  PASS  test\zip\zip.test.js

ok 590 — zip is a Function
ok 591 — zip([a, b], [1, 2], [true, false]) returns [[a, 1, true], [b, 2, false]]
ok 592 — zip([a], [1, 2], [true, false]) returns [[a, 1, true], [undefined, 2, false]]
ok 593 — zip([]) returns []
ok 594 — zip(123) returns []
ok 595 — zip([a, b], [1, 2], [true, false]) returns an Array
ok 596 — zip([a], [1, 2], [true, false]) returns an Array
ok 597 — zip(null) throws an error
ok 598 — zip(undefined) throws an error

#  PASS  test\initializeArrayWithRangeRight\initializeArrayWithRangeRight.test.js

ok 599 — initializeArrayWithRangeRight is a Function

#  PASS  test\attempt\attempt.test.js

ok 600 — attempt is a Function
ok 601 — Returns a value
ok 602 — Returns an error

#  PASS  test\forOwn\forOwn.test.js

ok 603 — forOwn is a Function
ok 604 — Iterates over an element's key-value pairs

#  PASS  test\dig\dig.test.js

ok 605 — dig is a Function
ok 606 — Dig target success
ok 607 — Dig target with falsey value
ok 608 — Dig target with array
ok 609 — Unknown target return undefined

#  PASS  test\median\median.test.js

ok 610 — median is a Function
ok 611 — Returns the median of an array of numbers
ok 612 — Returns the median of an array of numbers

#  PASS  test\fromCamelCase\fromCamelCase.test.js

ok 613 — fromCamelCase is a Function
ok 614 — Converts a string from camelcase
ok 615 — Converts a string from camelcase
ok 616 — Converts a string from camelcase

#  PASS  test\intersection\intersection.test.js

ok 617 — intersection is a Function
ok 618 — Returns a list of elements that exist in both arrays

#  PASS  test\factorial\factorial.test.js

ok 619 — factorial is a Function
ok 620 — Calculates the factorial of 720
ok 621 — Calculates the factorial of 0
ok 622 — Calculates the factorial of 1
ok 623 — Calculates the factorial of 4
ok 624 — Calculates the factorial of 10

#  PASS  test\offset\offset.test.js

ok 625 — offset is a Function
ok 626 — Offset of 0 returns the same array.
ok 627 — Offset > 0 returns the offsetted array.
ok 628 — Offset < 0 returns the reverse offsetted array.
ok 629 — Offset greater than the length of the array returns the same array.
ok 630 — Offset less than the negative length of the array returns the same array.
ok 631 — Offsetting empty array returns an empty array.

#  PASS  test\findLastIndex\findLastIndex.test.js

ok 632 — findLastIndex is a Function
ok 633 — Finds last index for which the given function returns true

#  PASS  test\countVowels\countVowels.test.js

ok 634 — countVowels is a Function

#  PASS  test\pipeAsyncFunctions\pipeAsyncFunctions.test.js

ok 635 — pipeAsyncFunctions is a Function
ok 636 — pipeAsyncFunctions result should be 15

#  PASS  test\isBoolean\isBoolean.test.js

ok 637 — isBoolean is a Function
ok 638 — passed value is not a boolean
ok 639 — passed value is not a boolean

#  PASS  test\over\over.test.js

ok 640 — over is a Function
ok 641 — Applies given functions over multiple arguments

#  PASS  test\getURLParameters\getURLParameters.test.js

ok 642 — getURLParameters is a Function
ok 643 — Returns an object containing the parameters of the current URL

#  PASS  test\primes\primes.test.js

ok 644 — primes is a Function
ok 645 — Generates primes up to a given number, using the Sieve of Eratosthenes.

#  PASS  test\filterNonUniqueBy\filterNonUniqueBy.test.js

ok 646 — filterNonUniqueBy is a Function
ok 647 — filterNonUniqueBy works for properties
ok 648 — filterNonUniqueBy works for nested properties

#  PASS  test\symmetricDifferenceBy\symmetricDifferenceBy.test.js

ok 649 — symmetricDifferenceBy is a Function
ok 650 — Returns the symmetric difference between two arrays, after applying the provided function to each array element of both

#  PASS  test\unzip\unzip.test.js

ok 651 — unzip is a Function
ok 652 — unzip([['a', 1, true], ['b', 2, false]]) equals [['a','b'], [1, 2], [true, false]]
ok 653 — unzip([['a', 1, true], ['b', 2]]) equals [['a','b'], [1, 2], [true]]

#  PASS  test\copyToClipboard\copyToClipboard.test.js

ok 654 — copyToClipboard is a Function

#  PASS  test\partition\partition.test.js

ok 655 — partition is a Function
ok 656 — Groups the elements into two arrays, depending on the provided function's truthiness for each element.

#  PASS  test\sortCharactersInString\sortCharactersInString.test.js

ok 657 — sortCharactersInString is a Function
ok 658 — Alphabetically sorts the characters in a string.

#  PASS  test\take\take.test.js

ok 659 — take is a Function
ok 660 — Returns an array with n elements removed from the beginning.
ok 661 — Returns an array with n elements removed from the beginning.

#  PASS  test\randomHexColorCode\randomHexColorCode.test.js

ok 662 — randomHexColorCode is a Function
ok 663 — randomHexColorCode has to proper length
ok 664 — The color code starts with "#"
ok 665 — The color code contains only valid hex-digits

#  PASS  test\round\round.test.js

ok 666 — round is a Function
ok 667 — round(1.005, 2) returns 1.01
ok 668 — round(123.3423345345345345344, 11) returns 123.34233453453
ok 669 — round(3.342, 11) returns 3.342
ok 670 — round(1.005) returns 1
ok 671 — round([1.005, 2]) returns NaN
ok 672 — round(string) returns NaN
ok 673 — round() returns NaN
ok 674 — round(132, 413, 4134) returns NaN
ok 675 — round({a: 132}, 413) returns NaN
ok 676 — round(123.3423345345345345344, 11) takes less than 2s to run

#  PASS  test\coalesceFactory\coalesceFactory.test.js

ok 677 — coalesceFactory is a Function
ok 678 — Returns a customized coalesce function

#  PASS  test\delay\delay.test.js

ok 679 — delay is a Function
ok 680 — Works as expecting, passing arguments properly

#  PASS  test\standardDeviation\standardDeviation.test.js

ok 681 — standardDeviation is a Function
ok 682 — Returns the standard deviation of an array of numbers
ok 683 — Returns the standard deviation of an array of numbers

#  PASS  test\initializeArrayWithRange\initializeArrayWithRange.test.js

ok 684 — initializeArrayWithRange is a Function
ok 685 — Initializes an array containing the numbers in the specified range (witout start value)
ok 686 — Initializes an array containing the numbers in the specified range
ok 687 — Initializes an array containing the numbers in the specified range (with step)

#  PASS  test\redirect\redirect.test.js

ok 688 — redirect is a Function

#  PASS  test\show\show.test.js

ok 689 — show is a Function

#  PASS  test\nthElement\nthElement.test.js

ok 690 — nthElement is a Function
ok 691 — Returns the nth element of an array.
ok 692 — Returns the nth element of an array.

#  PASS  test\getDaysDiffBetweenDates\getDaysDiffBetweenDates.test.js

ok 693 — getDaysDiffBetweenDates is a Function
ok 694 — Returns the difference in days between two dates

#  PASS  test\timeTaken\timeTaken.test.js

ok 695 — timeTaken is a Function

#  PASS  test\any\any.test.js

ok 696 — any is a Function
ok 697 — Returns true for arrays with at least one truthy value
ok 698 — Returns false for arrays with no truthy values
ok 699 — Returns false for arrays with no truthy values
ok 700 — Returns true with predicate function
ok 701 — Returns false with a predicate function

#  PASS  test\initialize2DArray\initialize2DArray.test.js

ok 702 — initialize2DArray is a Function
ok 703 — Initializes a 2D array of given width and height and value

#  PASS  test\differenceBy\differenceBy.test.js

ok 704 — differenceBy is a Function
ok 705 — Works using a native function and numbers
ok 706 — Works with arrow function and objects

#  PASS  test\clampNumber\clampNumber.test.js

ok 707 — clampNumber is a Function
ok 708 — Clamps num within the inclusive range specified by the boundary values a and b

#  PASS  test\cleanObj\cleanObj.test.js

ok 709 — cleanObj is a Function
ok 710 — Removes any properties except the ones specified from a JSON object

#  PASS  test\averageBy\averageBy.test.js

ok 711 — averageBy is a Function
ok 712 — Produces the right result with a function
ok 713 — Produces the right result with a property name

#  PASS  test\is\is.test.js

ok 714 — is is a Function
ok 715 — Works for arrays with data
ok 716 — Works for empty arrays
ok 717 — Works for arrays, not objects
ok 718 — Works for objects
ok 719 — Works for maps
ok 720 — Works for regular expressions
ok 721 — Works for sets
ok 722 — Works for weak maps
ok 723 — Works for weak sets
ok 724 — Works for strings - returns true for primitive
ok 725 — Works for strings - returns true when using constructor
ok 726 — Works for numbers - returns true for primitive
ok 727 — Works for numbers - returns true when using constructor
ok 728 — Works for booleans - returns true for primitive
ok 729 — Works for booleans - returns true when using constructor
ok 730 — Works for functions

#  PASS  test\promisify\promisify.test.js

ok 731 — promisify is a Function
ok 732 — Returns a promise
ok 733 — Runs the function provided

#  PASS  test\findLastKey\findLastKey.test.js

ok 734 — findLastKey is a Function
ok 735 — eturns the appropriate key

#  PASS  test\speechSynthesis\speechSynthesis.test.js

ok 736 — speechSynthesis is a Function

#  PASS  test\deepClone\deepClone.test.js

ok 737 — deepClone is a Function
ok 738 — Shallow cloning works
ok 739 — Deep cloning works
ok 740 — Array shallow cloning works
ok 741 — Array deep cloning works

#  PASS  test\objectToPairs\objectToPairs.test.js

ok 742 — objectToPairs is a Function
ok 743 — Creates an array of key-value pair arrays from an object.

#  PASS  test\compose\compose.test.js

ok 744 — compose is a Function
ok 745 — Performs right-to-left function composition

#  PASS  test\dropRightWhile\dropRightWhile.test.js

ok 746 — dropRightWhile is a Function
ok 747 — Removes elements from the end of an array until the passed function returns true.

#  PASS  test\nodeListToArray\nodeListToArray.test.js

ok 748 — nodeListToArray is a Function

#  PASS  test\zipWith\zipWith.test.js

ok 749 — zipWith is a Function

#  PASS  test\mapKeys\mapKeys.test.js

ok 750 — mapKeys is a Function
ok 751 — Maps keys

#  PASS  test\gcd\gcd.test.js

ok 752 — gcd is a Function
ok 753 — Calculates the greatest common divisor between two or more numbers/arrays
ok 754 — Calculates the greatest common divisor between two or more numbers/arrays

#  PASS  test\approximatelyEqual\approximatelyEqual.test.js

ok 755 — approximatelyEqual is a Function
ok 756 — Works for PI / 2
ok 757 — Works for 0.1 + 0.2 === 0.3
ok 758 — Works for exactly equal values
ok 759 — Works for a custom epsilon

#  PASS  test\getColonTimeFromDate\getColonTimeFromDate.test.js

ok 760 — getColonTimeFromDate is a Function

#  PASS  test\chainAsync\chainAsync.test.js

ok 761 — chainAsync is a Function
ok 762 — Calls all functions in an array

#  PASS  test\isPlainObject\isPlainObject.test.js

ok 763 — isPlainObject is a Function
ok 764 — Returns true for a plain object
ok 765 — Returns false for a Map (example of non-plain object)

#  PASS  test\sumBy\sumBy.test.js

ok 766 — sumBy is a Function

#  PASS  test\mapObject\mapObject.test.js

ok 767 — mapObject is a Function
ok 768 — mapObject([1, 2, 3], a => a * a) returns { 1: 1, 2: 4, 3: 9 }
ok 769 — mapObject([1, 2, 3, 4], (a, b) => b - a) returns { 1: -1, 2: -1, 3: -1, 4: -1 }
ok 770 — mapObject([1, 2, 3, 4], (a, b) => a - b) returns { 1: 1, 2: 1, 3: 1, 4: 1 }

#  PASS  test\formatDuration\formatDuration.test.js

ok 771 — formatDuration is a Function
ok 772 — Returns the human readable format of the given number of milliseconds
ok 773 — Returns the human readable format of the given number of milliseconds

#  PASS  test\symmetricDifferenceWith\symmetricDifferenceWith.test.js

ok 774 — symmetricDifferenceWith is a Function
ok 775 — Returns the symmetric difference between two arrays, using a provided function as a comparator

#  PASS  test\isNull\isNull.test.js

ok 776 — isNull is a Function
ok 777 — passed argument is a null
ok 778 — passed argument is a null

#  PASS  test\elementIsVisibleInViewport\elementIsVisibleInViewport.test.js

ok 779 — elementIsVisibleInViewport is a Function

#  PASS  test\sumPower\sumPower.test.js

ok 780 — sumPower is a Function
ok 781 — Returns the sum of the powers of all the numbers from start to end
ok 782 — Returns the sum of the powers of all the numbers from start to end
ok 783 — Returns the sum of the powers of all the numbers from start to end

#  PASS  test\partialRight\partialRight.test.js

ok 784 — partialRight is a Function
ok 785 — Appends arguments

#  PASS  test\join\join.test.js

ok 786 — join is a Function
ok 787 — Joins all elements of an array into a string and returns this string
ok 788 — Joins all elements of an array into a string and returns this string
ok 789 — Joins all elements of an array into a string and returns this string

#  PASS  test\readFileLines\readFileLines.test.js

ok 790 — readFileLines is a Function

#  PASS  test\isBrowserTabFocused\isBrowserTabFocused.test.js

ok 791 — isBrowserTabFocused is a Function

#  PASS  test\parseCookie\parseCookie.test.js

ok 792 — parseCookie is a Function
ok 793 — Parses the cookie

#  PASS  test\randomIntegerInRange\randomIntegerInRange.test.js

ok 794 — randomIntegerInRange is a Function
ok 795 — The returned value is an integer
ok 796 — The returned value lies between provided lowerLimit and upperLimit (both inclusive).

#  PASS  test\countBy\countBy.test.js

ok 797 — countBy is a Function
ok 798 — Works for functions
ok 799 — Works for property names

#  PASS  test\prettyBytes\prettyBytes.test.js

ok 800 — prettyBytes is a Function
ok 801 — Converts a number in bytes to a human-readable string.
ok 802 — Converts a number in bytes to a human-readable string.
ok 803 — Converts a number in bytes to a human-readable string.

#  PASS  test\isEven\isEven.test.js

ok 804 — isEven is a Function
ok 805 — 4 is even number
ok 806 — 5 is not an even number

#  PASS  test\fibonacciCountUntilNum\fibonacciCountUntilNum.test.js

ok 807 — fibonacciCountUntilNum is a Function

#  PASS  test\on\on.test.js

ok 808 — on is a Function

#  PASS  test\createEventHub\createEventHub.test.js

ok 809 — createEventHub is a Function

#  PASS  test\runPromisesInSeries\runPromisesInSeries.test.js

ok 810 — runPromisesInSeries is a Function
ok 811 — Runs promises in series

#  PASS  test\CSVToArray\CSVToArray.test.js

ok 812 — CSVToArray is a Function
ok 813 — CSVToArray works with default delimiter
ok 814 — CSVToArray works with custom delimiter
ok 815 — CSVToArray omits the first row
ok 816 — CSVToArray omits the first row and works with a custom delimiter

#  PASS  test\ary\ary.test.js

ok 817 — ary is a Function
ok 818 — Discards arguments with index >=n

#  PASS  test\hammingDistance\hammingDistance.test.js

ok 819 — hammingDistance is a Function
ok 820 — retuns hamming disance between 2 values

#  PASS  test\pick\pick.test.js

ok 821 — pick is a Function
ok 822 — Picks the key-value pairs corresponding to the given keys from an object.

#  PASS  test\transform\transform.test.js

ok 823 — transform is a Function
ok 824 — Transforms an object

#  PASS  test\rearg\rearg.test.js

ok 825 — rearg is a Function
ok 826 — Reorders arguments in invoked function

#  PASS  test\binomialCoefficient\binomialCoefficient.test.js

ok 827 — binomialCoefficient is a Function
ok 828 — Returns the appropriate value
ok 829 — Returns the appropriate value
ok 830 — Returns the appropriate value
ok 831 — Returns NaN
ok 832 — Returns NaN

#  PASS  test\triggerEvent\triggerEvent.test.js

ok 833 — triggerEvent is a Function

#  PASS  test\scrollToTop\scrollToTop.test.js

ok 834 — scrollToTop is a Function

#  PASS  test\serializeCookie\serializeCookie.test.js

ok 835 — serializeCookie is a Function
ok 836 — Serializes the cookie

#  PASS  test\coalesce\coalesce.test.js

ok 837 — coalesce is a Function
ok 838 — Returns the first non-null/undefined argument

#  PASS  test\hide\hide.test.js

ok 839 — hide is a Function

#  PASS  test\drop\drop.test.js

ok 840 — drop is a Function
ok 841 — Works without the last argument
ok 842 — Removes appropriate element count as specified
ok 843 — Empties array given a count greater than length

#  PASS  test\pull\pull.test.js

ok 844 — pull is a Function
ok 845 — Pulls the specified values

#  PASS  test\truthCheckCollection\truthCheckCollection.test.js

ok 846 — truthCheckCollection is a Function
ok 847 — second argument is truthy on all elements of a collection

#  PASS  test\isAnagram\isAnagram.test.js

ok 848 — isAnagram is a Function
ok 849 — Checks valid anagram
ok 850 — Works with spaces
ok 851 — Ignores case
ok 852 — Ignores special characters

#  PASS  test\initial\initial.test.js

ok 853 — initial is a Function
ok 854 — Returns all the elements of an array except the last one

#  PASS  test\CSVToJSON\CSVToJSON.test.js

ok 855 — CSVToJSON is a Function
ok 856 — CSVToJSON works with default delimiter
ok 857 — CSVToJSON works with custom delimiter

#  PASS  test\prefix\prefix.test.js

ok 858 — prefix is a Function

#  PASS  test\flattenObject\flattenObject.test.js

ok 859 — flattenObject is a Function
ok 860 — Flattens an object with the paths for keys
ok 861 — Works with arrays

#  PASS  test\howManyTimes\howManyTimes.test.js

ok 862 — howManyTimes is a Function

#  PASS  test\bindAll\bindAll.test.js

ok 863 — bindAll is a Function
ok 864 — Binds to an object context

#  PASS  test\unionBy\unionBy.test.js

ok 865 — unionBy is a Function
ok 866 — Produces the appropriate results

#  PASS  test\bindKey\bindKey.test.js

ok 867 — bindKey is a Function
ok 868 — Binds function to an object context

#  PASS  test\sum\sum.test.js

ok 869 — sum is a Function
ok 870 — Returns the sum of two or more numbers/arrays.

#  PASS  test\xProd\xProd.test.js

ok 871 — xProd is a Function
ok 872 — xProd([1, 2], ['a', 'b']) returns [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]

#  PASS  test\sortedLastIndex\sortedLastIndex.test.js

ok 873 — sortedLastIndex is a Function
ok 874 — Returns the highest index to insert the element without messing up the list order

#  PASS  test\nthArg\nthArg.test.js

ok 875 — nthArg is a Function
ok 876 — Returns the nth argument
ok 877 — Returns undefined if arguments too few
ok 878 — Works for negative values

#  PASS  test\matches\matches.test.js

ok 879 — matches is a Function
ok 880 — Matches returns true for two similar objects
ok 881 — Matches returns false for two non-similar objects

#  PASS  test\validateNumber\validateNumber.test.js

ok 882 — validateNumber is a Function
ok 883 — validateNumber(9) returns true
ok 884 — validateNumber(234asd.slice(0, 2)) returns true
ok 885 — validateNumber(1232) returns true
ok 886 — validateNumber(1232 + 13423) returns true
ok 887 — validateNumber(1232 * 2342 * 123) returns true
ok 888 — validateNumber(1232.23423536) returns true
ok 889 — validateNumber(234asd) returns false
ok 890 — validateNumber(e234d) returns false
ok 891 — validateNumber(false) returns false
ok 892 — validateNumber(true) returns false
ok 893 — validateNumber(null) returns false
ok 894 — validateNumber(123 * asd) returns false

#  PASS  test\isObjectLike\isObjectLike.test.js

ok 895 — isObjectLike is a Function
ok 896 — Returns true for an object
ok 897 — Returns true for an array
ok 898 — Returns false for a function
ok 899 — Returns false for null

#  PASS  test\untildify\untildify.test.js

ok 900 — untildify is a Function
ok 901 — Contains no tildes
ok 902 — Does not alter the rest of the path
ok 903 — Does not alter paths without tildes

#  PASS  test\geometricProgression\geometricProgression.test.js

ok 904 — geometricProgression is a Function
ok 905 — Initializes an array containing the numbers in the specified range
ok 906 — Initializes an array containing the numbers in the specified range
ok 907 — Initializes an array containing the numbers in the specified range

#  PASS  test\isPromiseLike\isPromiseLike.test.js

ok 908 — isPromiseLike is a Function
ok 909 — Returns true for a promise-like object
ok 910 — Returns false for an empty object

#  PASS  test\isTravisCI\isTravisCI.test.js

ok 911 — isTravisCI is a Function
ok 912 — Not running on Travis, correctly evaluates

#  PASS  test\unescapeHTML\unescapeHTML.test.js

ok 913 — unescapeHTML is a Function
ok 914 — Unescapes escaped HTML characters.

#  PASS  test\splitLines\splitLines.test.js

ok 915 — splitLines is a Function
ok 916 — Splits a multiline string into an array of lines.

#  PASS  test\similarity\similarity.test.js

ok 917 — similarity is a Function
ok 918 — Returns an array of elements that appear in both arrays.

#  PASS  test\observeMutations\observeMutations.test.js

ok 919 — observeMutations is a Function

#  PASS  test\pullAtIndex\pullAtIndex.test.js

ok 920 — pullAtIndex is a Function
ok 921 — Pulls the given values
ok 922 — Pulls the given values

#  PASS  test\sortedLastIndexBy\sortedLastIndexBy.test.js

ok 923 — sortedLastIndexBy is a Function
ok 924 — Returns the highest index to insert the element without messing up the list order

#  PASS  test\mapValues\mapValues.test.js

ok 925 — mapValues is a Function
ok 926 — Maps values

#  PASS  test\elo\elo.test.js

ok 927 — elo is a Function
ok 928 — Standard 1v1s
ok 929 — Standard 1v1s
ok 930 — 4 player FFA, all same rank

#  PASS  test\isPrimitive\isPrimitive.test.js

ok 931 — isPrimitive is a Function
ok 932 — isPrimitive(null) is primitive
ok 933 — isPrimitive(undefined) is primitive
ok 934 — isPrimitive(string) is primitive
ok 935 — isPrimitive(true) is primitive
ok 936 — isPrimitive(50) is primitive
ok 937 — isPrimitive('Hello') is primitive
ok 938 — isPrimitive(false) is primitive
ok 939 — isPrimitive(Symbol()) is primitive
ok 940 — isPrimitive([1, 2, 3]) is not primitive
ok 941 — isPrimitive({ a: 123 }) is not primitive
ok 942 — isPrimitive({ a: 123 }) takes less than 2s to run

#  PASS  test\minN\minN.test.js

ok 943 — minN is a Function
ok 944 — Returns the n minimum elements from the provided array
ok 945 — Returns the n minimum elements from the provided array

#  PASS  test\getScrollPosition\getScrollPosition.test.js

ok 946 — getScrollPosition is a Function

#  PASS  test\deepFlatten\deepFlatten.test.js

ok 947 — deepFlatten is a Function
ok 948 — Deep flattens an array

#  PASS  test\distance\distance.test.js

ok 949 — distance is a Function
ok 950 — Calculates the distance between two points

#  PASS  test\lowercaseKeys\lowercaseKeys.test.js

ok 951 — lowercaseKeys is a Function
ok 952 — Lowercases object keys
ok 953 — Does not mutate original object

#  PASS  test\symmetricDifference\symmetricDifference.test.js

ok 954 — symmetricDifference is a Function
ok 955 — Returns the symmetric difference between two arrays.
ok 956 — Returns duplicates from one array

#  PASS  test\isRegExp\isRegExp.test.js

ok 957 — isRegExp is a Function

#  PASS  test\sample\sample.test.js

ok 958 — sample is a Function
ok 959 — Returns a random element from the array
ok 960 — Works for single-element arrays
ok 961 — Returns undefined for empty array

#  PASS  test\isWeakSet\isWeakSet.test.js

ok 962 — isWeakSet is a Function

#  PASS  test\times\times.test.js

ok 963 — times is a Function
ok 964 — Runs a function the specified amount of times

#  PASS  test\arrayToHtmlList\arrayToHtmlList.test.js

ok 965 — arrayToHtmlList is a Function

#  PASS  test\toOrdinalSuffix\toOrdinalSuffix.test.js

ok 966 — toOrdinalSuffix is a Function
ok 967 — Adds an ordinal suffix to a number
ok 968 — Adds an ordinal suffix to a number
ok 969 — Adds an ordinal suffix to a number
ok 970 — Adds an ordinal suffix to a number

#  PASS  test\percentile\percentile.test.js

ok 971 — percentile is a Function
ok 972 — Uses the percentile formula to calculate how many numbers in the given array are less or equal to the given value.

#  PASS  test\differenceWith\differenceWith.test.js

ok 973 — differenceWith is a Function
ok 974 — Filters out all values from an array

#  PASS  test\size\size.test.js

ok 975 — size is a Function
ok 976 — Get size of arrays, objects or strings.
ok 977 — Get size of arrays, objects or strings.

#  PASS  test\isLowerCase\isLowerCase.test.js

ok 978 — isLowerCase is a Function
ok 979 — passed string is a lowercase
ok 980 — passed string is a lowercase
ok 981 — passed value is not a lowercase

#  PASS  test\radsToDegrees\radsToDegrees.test.js

ok 982 — radsToDegrees is a Function
ok 983 — Returns the appropriate value

#  PASS  test\uniqueElementsBy\uniqueElementsBy.test.js

ok 984 — uniqueElementsBy is a Function
ok 985 — uniqueElementsBy works for properties
ok 986 — uniqueElementsBy works for nested properties

#  PASS  test\defer\defer.test.js

ok 987 — defer is a Function

#  PASS  test\intersectionWith\intersectionWith.test.js

ok 988 — intersectionWith is a Function
ok 989 — Returns a list of elements that exist in both arrays, using a provided comparator function

#  PASS  test\maxBy\maxBy.test.js

ok 990 — maxBy is a Function
ok 991 — Produces the right result with a function
ok 992 — Produces the right result with a property name

#  PASS  test\httpGet\httpGet.test.js

ok 993 — httpGet is a Function

#  PASS  test\sortedIndexBy\sortedIndexBy.test.js

ok 994 — sortedIndexBy is a Function
ok 995 — Returns the lowest index to insert the element without messing up the list order

#  PASS  test\takeRightWhile\takeRightWhile.test.js

ok 996 — takeRightWhile is a Function
ok 997 — Removes elements until the function returns true

#  PASS  test\nest\nest.test.js

ok 998 — nest is a Function

#  PASS  test\dropWhile\dropWhile.test.js

ok 999 — dropWhile is a Function
ok 1000 — Removes elements in an array until the passed function returns true.

#  PASS  test\toDecimalMark\toDecimalMark.test.js

ok 1001 — toDecimalMark is a Function
ok 1002 — convert a float-point arithmetic to the Decimal mark form

#  PASS  test\spreadOver\spreadOver.test.js

ok 1003 — spreadOver is a Function
ok 1004 — Takes a variadic function and returns a closure that accepts an array of arguments to map to the inputs of the function.

#  PASS  test\hexToRGB\hexToRGB.test.js

ok 1005 — hexToRGB is a Function
ok 1006 — Converts a color code to a rgb() or rgba() string
ok 1007 — Converts a color code to a rgb() or rgba() string
ok 1008 — Converts a color code to a rgb() or rgba() string

#  PASS  test\mapString\mapString.test.js

ok 1009 — mapString is a Function
ok 1010 — mapString returns a capitalized string
ok 1011 — mapString can deal with indexes
ok 1012 — mapString can deal with the full string

#  PASS  test\insertBefore\insertBefore.test.js

ok 1013 — insertBefore is a Function

#  PASS  test\isMap\isMap.test.js

ok 1014 — isMap is a Function

#  PASS  test\randomIntArrayInRange\randomIntArrayInRange.test.js

ok 1015 — randomIntArrayInRange is a Function
ok 1016 — The returned array contains only integers
ok 1017 — The returned array has the proper length
ok 1018 — The returned array's values lie between provided lowerLimit and upperLimit (both inclusive).

#  PASS  test\removeVowels\removeVowels.test.js

ok 1019 — removeVowels is a Function

#  PASS  test\pipeLog\pipeLog.test.js

ok 1020 — pipeLog is a Function

#  PASS  test\uncurry\uncurry.test.js

ok 1021 — uncurry is a Function
ok 1022 — Works without a provided value for n
ok 1023 — Works with n = 2
ok 1024 — Works with n = 3

#  PASS  test\solveRPN\solveRPN.test.js

ok 1025 — solveRPN is a Function

#  PASS  test\getMeridiemSuffixOfInteger\getMeridiemSuffixOfInteger.test.js

ok 1026 — getMeridiemSuffixOfInteger is a Function

#  PASS  test\castArray\castArray.test.js

ok 1027 — castArray is a Function
ok 1028 — Works for single values
ok 1029 — Works for arrays with one value
ok 1030 — Works for arrays with multiple value
ok 1031 — Works for strings
ok 1032 — Works for objects

#  PASS  test\isUpperCase\isUpperCase.test.js

ok 1033 — isUpperCase is a Function
ok 1034 — ABC is all upper case
ok 1035 — abc is not all upper case
ok 1036 — A3@$ is all uppercase

#  PASS  test\bifurcate\bifurcate.test.js

ok 1037 — bifurcate is a Function
ok 1038 — Splits the collection into two groups

#  PASS  test\isArrayLike\isArrayLike.test.js

ok 1039 — isArrayLike is a Function
ok 1040 — Returns true for a string
ok 1041 — Returns true for an array
ok 1042 — Returns false for null

#  PASS  test\escapeRegExp\escapeRegExp.test.js

ok 1043 — escapeRegExp is a Function
ok 1044 — Escapes a string to use in a regular expression

#  PASS  test\createElement\createElement.test.js

ok 1045 — createElement is a Function

#  PASS  test\functionName\functionName.test.js

ok 1046 — functionName is a Function
ok 1047 — Works for native functions
ok 1048 — Works for functions
ok 1049 — Works for arrow functions

#  PASS  test\reducedFilter\reducedFilter.test.js

ok 1050 — reducedFilter is a Function
ok 1051 — Filter an array of objects based on a condition while also filtering out unspecified keys.

#  PASS  test\isSimilar\isSimilar.test.js

ok 1052 — isSimilar is a Function

#  PASS  test\findKey\findKey.test.js

ok 1053 — findKey is a Function
ok 1054 — Returns the appropriate key

#  PASS  test\indexOfAll\indexOfAll.test.js

ok 1055 — indexOfAll is a Function
ok 1056 — Returns all indices of val in an array
ok 1057 — Returns all indices of val in an array

#  PASS  test\JSONToDate\JSONToDate.test.js

ok 1058 — JSONToDate is a Function

1..1058

# Test Suites: 100% ██████████, 1 failed, 349 passed, 350 total
# Tests:       100% ██████████, 1 failed, 1057 passed, 1058 total
# Time:        73.771s, estimated 66s

# Ran all test suites.

