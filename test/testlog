

# Starting...
# 361 test suites found.

#  PASS  test/midpoint.test.js

ok 1 — midpoint is a Function
ok 2 — midpoint(2,2,4,4) = [3,3]
ok 3 — midpoint(4, 4, 6, 6) = [5,5]
ok 4 — midpoint(1, 3, 2, 4) = [3,3]

#  PASS  test/functionName.test.js

ok 5 — functionName is a Function
ok 6 — Works for native functions
ok 7 — Works for normal functions
ok 8 — Works for arrow functions

#  PASS  test/scrollToTop.test.js

ok 9 — scrollToTop is a Function

#  PASS  test/tomorrow.test.js

ok 10 — tomorrow is a Function

#  PASS  test/lcm.test.js

ok 11 — lcm is a Function
ok 12 — Returns the least common multiple of two or more numbers.
ok 13 — Returns the least common multiple of two or more numbers.

#  PASS  test/isNull.test.js

ok 14 — isNull is a Function
ok 15 — passed argument is a null
ok 16 — passed argument is a null

#  PASS  test/reduceWhich.test.js

ok 17 — reduceWhich is a Function
ok 18 — Returns the minimum of an array
ok 19 — Returns the maximum of an array
ok 20 — Returns the object with the minimum specified value in an array

#  PASS  test/zipWith.test.js

ok 21 — zipWith is a Function
ok 22 — zipWith returns the correct results
ok 23 — zipWith returns the correct results if no function is passed

#  PASS  test/bindKey.test.js

ok 24 — bindKey is a Function
ok 25 — Binds function to an object context

#  PASS  test/sortedIndexBy.test.js

ok 26 — sortedIndexBy is a Function
ok 27 — Returns the lowest index to insert the element without messing up the list order

#  PASS  test/dropRightWhile.test.js

ok 28 — dropRightWhile is a Function
ok 29 — Removes elements from the end of an array until the passed function returns true.

#  PASS  test/getImages.test.js

ok 30 — getImages is a Function
ok 31 — getImages returns an Array
ok 32 — getImages removes duplicates from images Array

#  PASS  test/getMeridiemSuffixOfInteger.test.js

ok 33 — getMeridiemSuffixOfInteger is a Function
ok 34 — Gets the correct meridiem suffix.
ok 35 — Gets the correct meridiem suffix.
ok 36 — Gets the correct meridiem suffix.
ok 37 — Gets the correct meridiem suffix.
ok 38 — Gets the correct meridiem suffix.

#  PASS  test/shallowClone.test.js

ok 39 — shallowClone is a Function
ok 40 — Shallow cloning works
ok 41 — Does not clone deeply

#  PASS  test/prefix.test.js

ok 42 — prefix is a Function
ok 43 — prefix is a Function

#  PASS  test/head.test.js

ok 44 — head is a Function
ok 45 — head({ a: 1234}) returns undefined
ok 46 — head([1, 2, 3]) returns 1
ok 47 — head({ 0: false}) returns false
ok 48 — head(String) returns S
ok 49 — head(null) throws an Error
ok 50 — head(undefined) throws an Error
ok 51 — head() throws an Error
ok 52 — head([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test/initialize2DArray.test.js

ok 53 — initialize2DArray is a Function
ok 54 — Initializes a 2D array of given width and height and value
ok 55 — Initializes a 2D array of given width and height and value (no fill)

#  PASS  test/isStream.test.js

ok 56 — isStream is a Function
ok 57 — isStream returns true for read streams
ok 58 — isStream returns true for write streams
ok 59 — isStream returns true for duplex streams
ok 60 — isStream returns false for non-streams

#  PASS  test/converge.test.js

ok 61 — converge is a Function
ok 62 — Produces the average of the array
ok 63 — Produces the strange concatenation

#  PASS  test/reject.test.js

ok 64 — reject is a Function
ok 65 — Works with numbers
ok 66 — Works with strings

#  PASS  test/insertAfter.test.js

ok 67 — insertAfter is a Function
ok 68 — Does not throw error if the element exists

#  PASS  test/isFunction.test.js

ok 69 — isFunction is a Function
ok 70 — passed value is a function
ok 71 — passed value is not a function

#  PASS  test/pull.test.js

ok 72 — pull is a Function
ok 73 — Pulls the specified values

#  PASS  test/castArray.test.js

ok 74 — castArray is a Function
ok 75 — Works for single values
ok 76 — Works for arrays with one value
ok 77 — Works for arrays with multiple value
ok 78 — Works for strings
ok 79 — Works for objects

#  PASS  test/transform.test.js

ok 80 — transform is a Function
ok 81 — Transforms an object

#  PASS  test/untildify.test.js

ok 82 — untildify is a Function
ok 83 — Contains no tildes
ok 84 — Does not alter the rest of the path
ok 85 — Does not alter paths without tildes

#  PASS  test/nthArg.test.js

ok 86 — nthArg is a Function
ok 87 — Returns the nth argument
ok 88 — Returns undefined if arguments too few
ok 89 — Works for negative values

#  PASS  test/pipeLog.test.js

ok 90 — pipeLog is a Function
ok 91 — pipeLog returns the given value

#  PASS  test/extendHex.test.js

ok 92 — extendHex is a Function
ok 93 — Extends a 3-digit color code to a 6-digit color code
ok 94 — Extends a 3-digit color code to a 6-digit color code

#  PASS  test/CSVToJSON.test.js

ok 95 — CSVToJSON is a Function
ok 96 — CSVToJSON works with default delimiter
ok 97 — CSVToJSON works with custom delimiter

#  PASS  test/minDate.test.js

ok 98 — minDate is a Function
ok 99 — minDate produces the maximum date

#  PASS  test/defer.test.js

ok 100 — defer is a Function

#  PASS  test/symmetricDifference.test.js

ok 101 — symmetricDifference is a Function
ok 102 — Returns the symmetric difference between two arrays.
ok 103 — Returns duplicates from one array

#  PASS  test/toCamelCase.test.js

ok 104 — toCamelCase is a Function
ok 105 — toCamelCase('some_database_field_name') returns someDatabaseFieldName
ok 106 — toCamelCase('Some label that needs to be camelized') returns someLabelThatNeedsToBeCamelized
ok 107 — toCamelCase('some-javascript-property') return someJavascriptProperty
ok 108 — toCamelCase('some-mixed_string with spaces_underscores-and-hyphens') returns someMixedStringWithSpacesUnderscoresAndHyphens
ok 109 — toCamelCase() throws a error
ok 110 — toCamelCase([]) throws a error
ok 111 — toCamelCase({}) throws a error
ok 112 — toCamelCase(123) throws a error
ok 113 — toCamelCase(some-mixed_string with spaces_underscores-and-hyphens) takes less than 2s to run

#  PASS  test/drop.test.js

ok 114 — drop is a Function
ok 115 — Works without the last argument
ok 116 — Removes appropriate element count as specified
ok 117 — Empties array given a count greater than length

#  PASS  test/sortedLastIndexBy.test.js

ok 118 — sortedLastIndexBy is a Function
ok 119 — Returns the highest index to insert the element without messing up the list order

#  PASS  test/countVowels.test.js

ok 120 — countVowels is a Function
ok 121 — countVowels returns the correct count
ok 122 — countVowels returns the correct count

#  PASS  test/take.test.js

ok 123 — take is a Function
ok 124 — Returns an array with n elements removed from the beginning.
ok 125 — Returns an array with n elements removed from the beginning.
ok 126 — Returns an array with n elements removed from the beginning.

#  PASS  test/uniqueElementsByRight.test.js

ok 127 — uniqueElementsByRight is a Function
ok 128 — uniqueElementsByRight works for properties
ok 129 — uniqueElementsByRight works for nested properties

#  PASS  test/cloneRegExp.test.js

ok 130 — cloneRegExp is a Function
ok 131 — Clones regular expressions properly

#  PASS  test/unionBy.test.js

ok 132 — unionBy is a Function
ok 133 — Produces the appropriate results

#  PASS  test/sumPower.test.js

ok 134 — sumPower is a Function
ok 135 — Returns the sum of the powers of all the numbers from start to end
ok 136 — Returns the sum of the powers of all the numbers from start to end
ok 137 — Returns the sum of the powers of all the numbers from start to end

#  PASS  test/xProd.test.js

ok 138 — xProd is a Function
ok 139 — xProd([1, 2], ['a', 'b']) returns [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]

#  PASS  test/timeTaken.test.js

ok 140 — timeTaken is a Function
ok 141 — timeTaken is a Function

#  PASS  test/hashNode.test.js

ok 142 — hashNode is a Function
ok 143 — Produces the appropriate hash

#  PASS  test/fromCamelCase.test.js

ok 144 — fromCamelCase is a Function
ok 145 — Converts a string from camelcase
ok 146 — Converts a string from camelcase
ok 147 — Converts a string from camelcase

#  PASS  test/toCurrency.test.js

ok 148 — toCurrency is a Function
ok 149 — currency: Euro | currencyLangFormat: Local
ok 150 —  currency: US Dollar | currencyLangFormat: English (United States)
ok 151 — currency: Japanese Yen | currencyLangFormat: Local

#  PASS  test/attempt.test.js

ok 152 — attempt is a Function
ok 153 — Returns a value
ok 154 — Returns an error

#  PASS  test/recordAnimationFrames.test.js

ok 155 — recordAnimationFrames is a Function

#  PASS  test/deepFlatten.test.js

ok 156 — deepFlatten is a Function
ok 157 — Deep flattens an array

#  PASS  test/zipObject.test.js

ok 158 — zipObject is a Function
ok 159 — zipObject([a, b, c], [1, 2]) returns {a: 1, b: 2, c: undefined}
ok 160 — zipObject([a, b], [1, 2, 3]) returns {a: 1, b: 2}
ok 161 — zipObject([a, b, c], string) returns { a: s, b: t, c: r }
ok 162 — zipObject([a], string) returns { a: s }
ok 163 — zipObject() throws an error
ok 164 — zipObject((['string'], null) throws an error
ok 165 — zipObject(null, [1]) throws an error
ok 166 — zipObject('string') throws an error
ok 167 — zipObject('test', 'string') throws an error

#  PASS  test/serializeCookie.test.js

ok 168 — serializeCookie is a Function
ok 169 — Serializes the cookie

#  PASS  test/squareSum.test.js

ok 170 — squareSum is a Function

#  PASS  test/toKebabCase.test.js

ok 171 — toKebabCase is a Function
ok 172 — toKebabCase('camelCase') returns camel-case
ok 173 — toKebabCase('some text') returns some-text
ok 174 — toKebabCase('some-mixed-string With spaces-underscores-and-hyphens') returns some-mixed-string-with-spaces-underscores-and-hyphens
ok 175 — toKebabCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') returns i-am-listening-to-fm-while-loading-different-url-on-my-browser-and-also-editing-some-xml-and-html
ok 176 — toKebabCase() returns undefined
ok 177 — toKebabCase([]) throws an erro
ok 178 — toKebabCase({}) throws an erro
ok 179 — toKebabCase(123) throws an erro
ok 180 — toKebabCase(IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML) takes less than 2s to run

#  PASS  test/initializeArrayWithRangeRight.test.js

ok 181 — initializeArrayWithRangeRight is a Function
ok 182 — Initializes an array containing the numbers in the specified range (witout start value)
ok 183 — Initializes an array containing the numbers in the specified range
ok 184 — Initializes an array containing the numbers in the specified range (with step)

#  PASS  test/counter.test.js

ok 185 — counter is a Function

#  PASS  test/equals.test.js

ok 186 — equals is a Function
ok 187 — { a: [2, {e: 3}], b: [4], c: 'foo' } is equal to { a: [2, {e: 3}], b: [4], c: 'foo' }
ok 188 — [1,2,3] is equal to [1,2,3]
ok 189 — { a: [2, 3], b: [4] } is not equal to { a: [2, 3], b: [6] }
ok 190 — [1,2,3] is not equal to [1,2,4]
ok 191 — [1, 2, 3] should be equal to { 0: 1, 1: 2, 2: 3 }) - type is different, but their enumerable properties match.
ok 192 — Two of the same date are equal
ok 193 — null should not be equal to anything
ok 194 — undefined should not be equal to anything
ok 195 — {a: ""} should not be equal to {a: "", b: ""}

#  PASS  test/sortedLastIndex.test.js

ok 196 — sortedLastIndex is a Function
ok 197 — Returns the highest index to insert the element without messing up the list order

#  PASS  test/round.test.js

ok 198 — round is a Function
ok 199 — round(1.005, 2) returns 1.01
ok 200 — round(123.3423345345345345344, 11) returns 123.34233453453
ok 201 — round(3.342, 11) returns 3.342
ok 202 — round(1.005) returns 1
ok 203 — round([1.005, 2]) returns NaN
ok 204 — round(string) returns NaN
ok 205 — round() returns NaN
ok 206 — round(132, 413, 4134) returns NaN
ok 207 — round({a: 132}, 413) returns NaN
ok 208 — round(123.3423345345345345344, 11) takes less than 2s to run

#  PASS  test/countOccurrences.test.js

ok 209 — countOccurrences is a Function
ok 210 — Counts the occurrences of a value in an array

#  PASS  test/isSameDate.test.js

ok 211 — isSameDate is a Function
ok 212 — isSameDate produces the correct result
ok 213 — isSameDate produces the correct result

#  PASS  test/JSONToDate.test.js

ok 214 — JSONToDate is a Function
ok 215 — JSONToDate returns the correct date string

#  PASS  test/compose.test.js

ok 216 — compose is a Function
ok 217 — Performs right-to-left function composition

#  PASS  test/distance.test.js

ok 218 — distance is a Function
ok 219 — Calculates the distance between two points

#  PASS  test/show.test.js

ok 220 — show is a Function

#  PASS  test/minBy.test.js

ok 221 — minBy is a Function
ok 222 — Produces the right result with a function
ok 223 — Produces the right result with a property name

#  PASS  test/isDuplexStream.test.js

ok 224 — isDuplexStream is a Function
ok 225 — isDuplexStream returns false for read streams
ok 226 — isDuplexStream returns false for write streams
ok 227 — isDuplexStream returns true for duplex streams
ok 228 — isDuplexStream returns false for non-streams

#  PASS  test/isBrowser.test.js

ok 229 — isBrowser is a Function
ok 230 — isBrowser is a Function

#  PASS  test/mostPerformant.test.js

ok 231 — mostPerformant is a Function
ok 232 — mostPerformant returns a number
ok 233 — mostPerformant returns a number

#  PASS  test/indexOfAll.test.js

ok 234 — indexOfAll is a Function
ok 235 — Returns all indices of val in an array
ok 236 — When val is not found, return an empty array

#  PASS  test/remove.test.js

ok 237 — remove is a Function
ok 238 — Removes elements from an array for which the given function returns false

#  PASS  test/JSONtoCSV.test.js

ok 239 — JSONtoCSV is a Function
ok 240 — JSONtoCSV works with default delimiter
ok 241 — JSONtoCSV works with custom delimiter

#  PASS  test/createEventHub.test.js

ok 242 — createEventHub is a Function

#  PASS  test/cleanObj.test.js

ok 243 — cleanObj is a Function
ok 244 — Removes any properties except the ones specified from a JSON object

#  PASS  test/isAnagram.test.js

ok 245 — isAnagram is a Function
ok 246 — Checks valid anagram
ok 247 — Works with spaces
ok 248 — Ignores case
ok 249 — Ignores special characters

#  PASS  test/escapeHTML.test.js

ok 250 — escapeHTML is a Function
ok 251 — Escapes a string for use in HTML

#  PASS  test/pad.test.js

ok 252 — pad is a Function
ok 253 — cat is padded on both sides
ok 254 — length of string is 8
ok 255 — pads 42 with "0"
ok 256 — does not truncates if string exceeds length

#  PASS  test/intersectionWith.test.js

ok 257 — intersectionWith is a Function
ok 258 — Returns a list of elements that exist in both arrays, using a provided comparator function

#  PASS  test/capitalize.test.js

ok 259 — capitalize is a Function
ok 260 — Capitalizes the first letter of a string
ok 261 — Capitalizes the first letter of a string
ok 262 — Works with characters
ok 263 — "Works with single character words

#  PASS  test/nthElement.test.js

ok 264 — nthElement is a Function
ok 265 — Returns the nth element of an array.
ok 266 — Returns the nth element of an array.
ok 267 — Returns the nth element of an array.
ok 268 — Returns the nth element of an array.

#  PASS  test/functions.test.js

ok 269 — functions is a Function
ok 270 — Returns own methods
ok 271 — Returns own and inherited methods

#  PASS  test/luhnCheck.test.js

ok 272 — luhnCheck is a Function
ok 273 — validates identification number
ok 274 — validates identification number
ok 275 — validates identification number

#  PASS  test/ary.test.js

ok 276 — ary is a Function
ok 277 — Discards arguments with index >=n

#  PASS  test/initializeNDArray.test.js

ok 278 — initializeNDArray is a Function
ok 279 — Initializes a n-D array with given data
ok 280 — Initializes a n-D array with given data

#  PASS  test/last.test.js

ok 281 — last is a Function
ok 282 — last({ a: 1234}) returns undefined
ok 283 — last([1, 2, 3]) returns 3
ok 284 — last({ 0: false}) returns undefined
ok 285 — last(String) returns g
ok 286 — last(null) throws an Error
ok 287 — last(undefined) throws an Error
ok 288 — last() throws an Error
ok 289 — last([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test/filterNonUnique.test.js

ok 290 — filterNonUnique is a Function
ok 291 — Filters out the non-unique values in an array

#  PASS  test/hasFlags.test.js

ok 292 — hasFlags is a Function

#  PASS  test/chainAsync.test.js

ok 293 — chainAsync is a Function
ok 294 — Calls all functions in an array

#  PASS  test/sum.test.js

ok 295 — sum is a Function
ok 296 — Returns the sum of two or more numbers/arrays.

#  PASS  test/heronArea.test.js

ok 297 — heronArea is a Function
ok 298 — howManyTimes returns the correct result

#  PASS  test/partialRight.test.js

ok 299 — partialRight is a Function
ok 300 — Appends arguments

#  PASS  test/mapString.test.js

ok 301 — mapString is a Function
ok 302 — mapString returns a capitalized string
ok 303 — mapString can deal with indexes
ok 304 — mapString can deal with the full string

#  PASS  test/mapValues.test.js

ok 305 — mapValues is a Function
ok 306 — Maps values

#  PASS  test/inRange.test.js

ok 307 — inRange is a Function
ok 308 — The given number falls within the given range
ok 309 — The given number falls within the given range (reverse)
ok 310 — The given number falls within the given range
ok 311 — The given number does not falls within the given range
ok 312 — The given number does not falls within the given range

#  PASS  test/deepFreeze.test.js

ok 313 — deepFreeze is a Function
ok 314 — modifying deeply freezed object prop throws an error in strict mode
ok 315 — should not modify deeply freezed object inside another object
ok 316 — should not add prop to deeply freezed empty object

#  PASS  test/isSorted.test.js

ok 317 — isSorted is a Function
ok 318 — Array is sorted in ascending order
ok 319 — Array is sorted in ascending order
ok 320 — Array is sorted in ascending order
ok 321 — Array is sorted in ascending order
ok 322 — Array is sorted in descending order
ok 323 — Array is sorted in descending order
ok 324 — Array is sorted in descending order
ok 325 — Array is sorted in descending order
ok 326 — Array is empty
ok 327 — Array is not sorted, direction changed in array
ok 328 — Array is not sorted, direction changed in array

#  PASS  test/mapKeys.test.js

ok 329 — mapKeys is a Function
ok 330 — Maps keys

#  PASS  test/similarity.test.js

ok 331 — similarity is a Function
ok 332 — Returns an array of elements that appear in both arrays.

#  PASS  test/gcd.test.js

ok 333 — gcd is a Function
ok 334 — Calculates the greatest common divisor between two or more numbers/arrays
ok 335 — Calculates the greatest common divisor between two or more numbers/arrays

#  PASS  test/isString.test.js

ok 336 — isString is a Function
ok 337 — foo is a string
ok 338 — "10" is a string
ok 339 — Empty string is a string
ok 340 — 10 is not a string
ok 341 — true is not string

#  PASS  test/reverseString.test.js

ok 342 — reverseString is a Function
ok 343 — Reverses a string.

#  PASS  test/lowercaseKeys.test.js

ok 344 — lowercaseKeys is a Function
ok 345 — Lowercases object keys
ok 346 — Does not mutate original object

#  PASS  test/primes.test.js

ok 347 — primes is a Function
ok 348 — Generates primes up to a given number, using the Sieve of Eratosthenes.

#  PASS  test/flattenObject.test.js

ok 349 — flattenObject is a Function
ok 350 — Flattens an object with the paths for keys
ok 351 — Works with arrays

#  PASS  test/hide.test.js

ok 352 — hide is a Function

#  PASS  test/removeNonASCII.test.js

ok 353 — removeNonASCII is a Function
ok 354 — Removes non-ASCII characters

#  PASS  test/throttle.test.js

ok 355 — throttle is a Function

#  PASS  test/arrayToCSV.test.js

ok 356 — arrayToCSV is a Function
ok 357 — arrayToCSV works with default delimiter
ok 358 — arrayToCSV works with custom delimiter

#  PASS  test/radsToDegrees.test.js

ok 359 — radsToDegrees is a Function
ok 360 — Returns the appropriate value

#  PASS  test/omitBy.test.js

ok 361 — omitBy is a Function
ok 362 — Creates an object composed of the properties the given function returns falsey for

#  PASS  test/httpPost.test.js

ok 363 — httpPost is a Function

#  PASS  test/initializeArrayWithValues.test.js

ok 364 — initializeArrayWithValues is a Function
ok 365 — Initializes and fills an array with the specified values
ok 366 — Initializes and fills an array with the specified values (no fill)

#  PASS  test/size.test.js

ok 367 — size is a Function
ok 368 — Get size of arrays, objects or strings.
ok 369 — Get size of arrays, objects or strings.

#  PASS  test/renameKeys.test.js

ok 370 — renameKeys is a Function
ok 371 — renameKeys is a Function

#  PASS  test/initializeArrayWithRange.test.js

ok 372 — initializeArrayWithRange is a Function
ok 373 — Initializes an array containing the numbers in the specified range (witout start value)
ok 374 — Initializes an array containing the numbers in the specified range
ok 375 — Initializes an array containing the numbers in the specified range (with step)

#  PASS  test/zip.test.js

ok 376 — zip is a Function
ok 377 — zip([a, b], [1, 2], [true, false]) returns [[a, 1, true], [b, 2, false]]
ok 378 — zip([a], [1, 2], [true, false]) returns [[a, 1, true], [undefined, 2, false]]
ok 379 — zip([]) returns []
ok 380 — zip(123) returns []
ok 381 — zip([a, b], [1, 2], [true, false]) returns an Array
ok 382 — zip([a], [1, 2], [true, false]) returns an Array
ok 383 — zip(null) throws an error
ok 384 — zip(undefined) throws an error

#  PASS  test/mphToKmph.test.js

ok 385 — mphToKmph is a Function
ok 386 — Returns kph from mph.

#  PASS  test/countBy.test.js

ok 387 — countBy is a Function
ok 388 — Works for functions
ok 389 — Works for property names

#  PASS  test/escapeRegExp.test.js

ok 390 — escapeRegExp is a Function
ok 391 — Escapes a string to use in a regular expression

#  PASS  test/elo.test.js

ok 392 — elo is a Function
ok 393 — Standard 1v1s
ok 394 — Standard 1v1s
ok 395 — 4 player FFA, all same rank

#  PASS  test/filterNonUniqueBy.test.js

ok 396 — filterNonUniqueBy is a Function
ok 397 — filterNonUniqueBy works for properties
ok 398 — filterNonUniqueBy works for nested properties

#  PASS  test/intersectionBy.test.js

ok 399 — intersectionBy is a Function
ok 400 — Returns a list of elements that exist in both arrays, after applying the provided function to each array element of both

#  PASS  test/bifurcateBy.test.js

ok 401 — bifurcateBy is a Function
ok 402 — Splits the collection into two groups

#  PASS  test/isPrime.test.js

ok 403 — isPrime is a Function
ok 404 — passed number is a prime

#  PASS  test/removeVowels.test.js

ok 405 — removeVowels is a Function
ok 406 — Removes vowels.
ok 407 — Replaces vowels.

#  PASS  test/takeWhile.test.js

ok 408 — takeWhile is a Function
ok 409 — Removes elements until the function returns true
ok 410 — Removes elements until the function returns true

#  PASS  test/collatz.test.js

ok 411 — collatz is a Function
ok 412 — When n is even, divide by 2
ok 413 — When n is odd, times by 3 and add 1
ok 414 — Eventually reaches 1

#  PASS  test/orderBy.test.js

ok 415 — orderBy is a Function
ok 416 — Returns a sorted array of objects ordered by properties and orders.
ok 417 — Returns a sorted array of objects ordered by properties and orders.

#  PASS  test/groupBy.test.js

ok 418 — groupBy is a Function
ok 419 — Groups the elements of an array based on the given function
ok 420 — Groups the elements of an array based on the given function

#  PASS  test/differenceWith.test.js

ok 421 — differenceWith is a Function
ok 422 — Filters out all values from an array

#  PASS  test/isEven.test.js

ok 423 — isEven is a Function
ok 424 — 4 is even number
ok 425 — 5 is not an even number

#  PASS  test/toOrdinalSuffix.test.js

ok 426 — toOrdinalSuffix is a Function
ok 427 — Adds an ordinal suffix to a number
ok 428 — Adds an ordinal suffix to a number
ok 429 — Adds an ordinal suffix to a number
ok 430 — Adds an ordinal suffix to a number

#  PASS  test/httpPut.test.js

ok 431 — httpPut is a Function

#  PASS  test/smoothScroll.test.js

ok 432 — smoothScroll is a Function

#  PASS  test/elementContains.test.js

ok 433 — elementContains is a Function

#  PASS  test/getColonTimeFromDate.test.js

ok 434 — getColonTimeFromDate is a Function
ok 435 — Gets the time in the proper format.

#  PASS  test/toDecimalMark.test.js

ok 436 — toDecimalMark is a Function
ok 437 — convert a float-point arithmetic to the Decimal mark form

#  PASS  test/arrayToHtmlList.test.js

ok 438 — arrayToHtmlList is a Function

#  PASS  test/delay.test.js

ok 439 — delay is a Function
ok 440 — Works as expecting, passing arguments properly

#  PASS  test/partition.test.js

ok 441 — partition is a Function
ok 442 — Groups the elements into two arrays, depending on the provided function's truthiness for each element.

#  PASS  test/capitalizeEveryWord.test.js

ok 443 — capitalizeEveryWord is a Function
ok 444 — Capitalizes the first letter of every word in a string
ok 445 — Works with characters
ok 446 — Works with one word string

#  PASS  test/palindrome.test.js

ok 447 — palindrome is a Function
ok 448 — Given string is a palindrome
ok 449 — Given string is not a palindrome

#  PASS  test/isValidJSON.test.js

ok 450 — isValidJSON is a Function
ok 451 — {"name":"Adam","age":20} is a valid JSON
ok 452 — {"name":"Adam",age:"20"} is not a valid JSON
ok 453 — null is a valid JSON

#  PASS  test/httpGet.test.js

ok 454 — httpGet is a Function

#  PASS  test/longestItem.test.js

ok 455 — longestItem is a Function
ok 456 — Returns the longest object from plain values
ok 457 — Returns the longest object from a spread array
ok 458 — Returns the longest object from mixed input
ok 459 — Returns the longest array
ok 460 — Returns the longest object when comparing arrays and strings
ok 461 — Returns TypeError without any input
ok 462 — Returns first found of all similar
ok 463 — Throws TypeError if all inputs are undefined

#  PASS  test/debounce.test.js

ok 464 — debounce is a Function
ok 465 — Works as expected

#  PASS  test/omit.test.js

ok 466 — omit is a Function
ok 467 — Omits the key-value pairs corresponding to the given keys from an object

#  PASS  test/fibonacciUntilNum.test.js

ok 468 — fibonacciUntilNum is a Function
ok 469 — Returns the correct sequence

#  PASS  test/findKey.test.js

ok 470 — findKey is a Function
ok 471 — Returns the appropriate key

#  PASS  test/splitLines.test.js

ok 472 — splitLines is a Function
ok 473 — Splits a multiline string into an array of lines.

#  PASS  test/isWritableStream.test.js

ok 474 — isWritableStream is a Function
ok 475 — isWritableStream returns false for read streams
ok 476 — isWritableStream returns true for write streams
ok 477 — isWritableStream returns true for duplex streams
ok 478 — isWritableStream returns false for non-streams

#  PASS  test/reduceSuccessive.test.js

ok 479 — reduceSuccessive is a Function
ok 480 — Returns the array of successively reduced values

#  PASS  test/flatten.test.js

ok 481 — flatten is a Function
ok 482 — Flattens an array
ok 483 — Flattens an array

#  PASS  test/overArgs.test.js

ok 484 — overArgs is a Function
ok 485 — Invokes the provided function with its arguments transformed

#  PASS  test/averageBy.test.js

ok 486 — averageBy is a Function
ok 487 — Produces the right result with a function
ok 488 — Produces the right result with a property name

#  PASS  test/readFileLines.test.js

ok 489 — readFileLines is a Function

#  PASS  test/JSONToFile.test.js

ok 490 — JSONToFile is a Function

#  PASS  test/stableSort.test.js

ok 491 — stableSort is a Function
ok 492 — Array is properly sorted

#  PASS  test/allEqual.test.js

ok 493 — allEqual is a Function
ok 494 — Truthy numbers
ok 495 — Falsy numbers
ok 496 — Truthy strings
ok 497 — Falsy numbers
ok 498 — Truthy trues
ok 499 — Truthy falses
ok 500 — Falsy trues
ok 501 — Falsy falses
ok 502 — False when there are different types

#  PASS  test/sampleSize.test.js

ok 503 — sampleSize is a Function
ok 504 — Returns a single element without n specified
ok 505 — Returns a random sample of specified size from an array
ok 506 — Returns all elements in an array if n >= length
ok 507 — Returns an empty array if original array is empty
ok 508 — Returns an empty array if n = 0

#  PASS  test/when.test.js

ok 509 — when is a Function
ok 510 — Returns the proper result
ok 511 — Returns the proper result

#  PASS  test/findLast.test.js

ok 512 — findLast is a Function
ok 513 — Finds last element for which the given function returns true

#  PASS  test/pullAtValue.test.js

ok 514 — pullAtValue is a Function
ok 515 — Pulls the specified values
ok 516 — Pulls the specified values

#  PASS  test/without.test.js

ok 517 — without is a Function
ok 518 — without([2, 1, 2, 3], 1, 2) returns [3]
ok 519 — without([]) returns []
ok 520 — without([3, 1, true, '3', true], '3', true) returns [3, 1]
ok 521 — without('string'.split(''), 's', 't', 'g') returns ['r', 'i', 'n']
ok 522 — without() throws an error
ok 523 — without(null) throws an error
ok 524 — without(undefined) throws an error
ok 525 — without(123) throws an error
ok 526 — without({}) throws an error

#  PASS  test/redirect.test.js

ok 527 — redirect is a Function

#  PASS  test/getType.test.js

ok 528 — getType is a Function
ok 529 — Returns the native type of a value
ok 530 — Returns null for null
ok 531 — Returns undefined for undefined

#  PASS  test/hammingDistance.test.js

ok 532 — hammingDistance is a Function
ok 533 — retuns hamming disance between 2 values

#  PASS  test/sample.test.js

ok 534 — sample is a Function
ok 535 — Returns a random element from the array
ok 536 — Works for single-element arrays
ok 537 — Returns undefined for empty array

#  PASS  test/join.test.js

ok 538 — join is a Function
ok 539 — Joins all elements of an array into a string and returns this string
ok 540 — Joins all elements of an array into a string and returns this string
ok 541 — Joins all elements of an array into a string and returns this string

#  PASS  test/getScrollPosition.test.js

ok 542 — getScrollPosition is a Function

#  PASS  test/byteSize.test.js

ok 543 — byteSize is a Function
ok 544 — Works for a single letter
ok 545 — Works for a common string
ok 546 — Works for emoji

#  PASS  test/dayOfYear.test.js

ok 547 — dayOfYear is a Function

#  PASS  test/symmetricDifferenceBy.test.js

ok 548 — symmetricDifferenceBy is a Function
ok 549 — Returns the symmetric difference between two arrays, after applying the provided function to each array element of both

#  PASS  test/digitize.test.js

ok 550 — digitize is a Function
ok 551 — Converts a number to an array of digits

#  PASS  test/pipeAsyncFunctions.test.js

ok 552 — pipeAsyncFunctions is a Function
ok 553 — pipeAsyncFunctions result should be 15

#  PASS  test/flip.test.js

ok 554 — flip is a Function
ok 555 — Flips argument order

#  PASS  test/invertKeyValues.test.js

ok 556 — invertKeyValues is a Function
ok 557 — invertKeyValues({ a: 1, b: 2, c: 1 }) returns { 1: [ 'a', 'c' ], 2: [ 'b' ] }
ok 558 — invertKeyValues({ a: 1, b: 2, c: 1 }, value => 'group' + value) returns { group1: [ 'a', 'c' ], group2: [ 'b' ] }

#  PASS  test/get.test.js

ok 559 — get is a Function
ok 560 — Retrieve a property indicated by the selector from an object.

#  PASS  test/unzipWith.test.js

ok 561 — unzipWith is a Function
ok 562 — unzipWith([[1, 10, 100], [2, 20, 200]], (...args) => args.reduce((acc, v) => acc + v, 0)) equals [3, 30, 300]

#  PASS  test/fahrenheitToCelsius.test.js

ok 563 — fahrenheitToCelsius is a Function
ok 564 — 32 Fahrenheit is 0 Celsius
ok 565 — 212 Fahrenheit is 100 Celsius
ok 566 — 150 Fahrenheit is 65.55555555555556 Celsius
ok 567 — 1000 Fahrenheit is 537.7777777777778
ok 568 — Not a number value is NaN

#  PASS  test/isEmpty.test.js

ok 569 — isEmpty is a Function
ok 570 — Returns true for empty Map
ok 571 — Returns true for empty Set
ok 572 — Returns true for empty array
ok 573 — Returns true for empty object
ok 574 — Returns true for empty string
ok 575 — Returns false for non-empty array
ok 576 — Returns false for non-empty object
ok 577 — Returns false for non-empty string
ok 578 — Returns true - type is not considered a collection
ok 579 — Returns true - type is not considered a collection

#  PASS  test/toTitleCase.test.js

ok 580 — toTitleCase is a Function
ok 581 — toTitleCase('some_database_field_name') returns Some Database Field Name
ok 582 — toTitleCase('Some label that needs to be titled') returns Some Label That Needs To Be Titled
ok 583 — toTitleCase('some-javaScript-property') return Some Java Script Property
ok 584 — toTitleCase('some-mixed_string with spaces_underscores-and-hyphens') returns Some Mixed String With Spaces Underscores And Hyphens
ok 585 — toTitleCase() throws a error
ok 586 — toTitleCase([]) throws a error
ok 587 — toCamelCase({}) throws a error
ok 588 — toTitleCase(123) throws a error
ok 589 — toTitleCase(some-mixed_string with spaces_underscores-and-hyphens) takes less than 2s to run

#  PASS  test/stripHTMLTags.test.js

ok 590 — stripHTMLTags is a Function
ok 591 — Removes HTML tags

#  PASS  test/powerset.test.js

ok 592 — powerset is a Function
ok 593 — Returns the powerset of a given array of numbers.

#  PASS  test/atob.test.js

ok 594 — atob is a Function
ok 595 — atob("Zm9vYmFy") equals "foobar"
ok 596 — atob("Z") returns ""

#  PASS  test/detectDeviceType.test.js

ok 597 — detectDeviceType is a Function

#  PASS  test/validateNumber.test.js

ok 598 — validateNumber is a Function
ok 599 — validateNumber(9) returns true
ok 600 — validateNumber(234asd.slice(0, 2)) returns true
ok 601 — validateNumber(1232) returns true
ok 602 — validateNumber(1232 + 13423) returns true
ok 603 — validateNumber(1232 * 2342 * 123) returns true
ok 604 — validateNumber(1232.23423536) returns true
ok 605 — validateNumber(234asd) returns false
ok 606 — validateNumber(e234d) returns false
ok 607 — validateNumber(false) returns false
ok 608 — validateNumber(true) returns false
ok 609 — validateNumber(null) returns false
ok 610 — validateNumber(123 * asd) returns false

#  PASS  test/isNil.test.js

ok 611 — isNil is a Function
ok 612 — Returns true for null
ok 613 — Returns true for undefined
ok 614 — Returns false for an empty string

#  PASS  test/indentString.test.js

ok 615 — indentString is a Function
ok 616 — indentString is a Function
ok 617 — indentString is a Function

#  PASS  test/decapitalize.test.js

ok 618 — decapitalize is a Function
ok 619 — Works with default parameter
ok 620 — Works with second parameter set to true

#  PASS  test/triggerEvent.test.js

ok 621 — triggerEvent is a Function

#  PASS  test/getURLParameters.test.js

ok 622 — getURLParameters is a Function
ok 623 — Returns an object containing the parameters of the current URL

#  PASS  test/isSymbol.test.js

ok 624 — isSymbol is a Function
ok 625 — Checks if the given argument is a symbol

#  PASS  test/dig.test.js

ok 626 — dig is a Function
ok 627 — Dig target success
ok 628 — Dig target with falsey value
ok 629 — Dig target with array
ok 630 — Unknown target return undefined

#  PASS  test/httpsRedirect.test.js

ok 631 — httpsRedirect is a Function

#  PASS  test/truncateString.test.js

ok 632 — truncateString is a Function
ok 633 — Truncates a "boomerang" up to a specified length.

#  PASS  test/unescapeHTML.test.js

ok 634 — unescapeHTML is a Function
ok 635 — Unescapes escaped HTML characters.

#  PASS  test/isObject.test.js

ok 636 — isObject is a Function
ok 637 — isObject([1, 2, 3, 4]) is a object
ok 638 — isObject([]) is a object
ok 639 — isObject({ a:1 }) is a object
ok 640 — isObject(true) is not a object

#  PASS  test/isDivisible.test.js

ok 641 — isDivisible is a Function
ok 642 — The number 6 is divisible by 3

#  PASS  test/sumBy.test.js

ok 643 — sumBy is a Function
ok 644 — Works with a callback.
ok 645 — Works with a property name.

#  PASS  test/levenshteinDistance.test.js

ok 646 — levenshteinDistance is a Function
ok 647 — levenshteinDistance returns the correct results
ok 648 — levenshteinDistance returns the correct result for 0-length string as first argument
ok 649 — levenshteinDistance returns the correct result for 0-length string as second argument

#  PASS  test/unzip.test.js

ok 650 — unzip is a Function
ok 651 — unzip([['a', 1, true], ['b', 2, false]]) equals [['a','b'], [1, 2], [true, false]]
ok 652 — unzip([['a', 1, true], ['b', 2]]) equals [['a','b'], [1, 2], [true]]

#  PASS  test/onUserInputChange.test.js

ok 653 — onUserInputChange is a Function

#  PASS  test/is.test.js

ok 654 — is is a Function
ok 655 — Works for arrays with data
ok 656 — Works for empty arrays
ok 657 — Works for arrays, not objects
ok 658 — Works for objects
ok 659 — Works for maps
ok 660 — Works for regular expressions
ok 661 — Works for sets
ok 662 — Works for weak maps
ok 663 — Works for weak sets
ok 664 — Works for strings - returns true for primitive
ok 665 — Works for strings - returns true when using constructor
ok 666 — Works for numbers - returns true for primitive
ok 667 — Works for numbers - returns true when using constructor
ok 668 — Works for booleans - returns true for primitive
ok 669 — Works for booleans - returns true when using constructor
ok 670 — Works for functions

#  PASS  test/uniqueElements.test.js

ok 671 — uniqueElements is a Function
ok 672 — uniqueElements([1, 2, 2, 3, 4, 4, 5]) returns [1,2,3,4,5]
ok 673 — uniqueElements([1, 23, 53]) returns [1, 23, 53]
ok 674 — uniqueElements([true, 0, 1, false, false, undefined, null, '']) returns [true, 0, 1, false, false, undefined, null, '']
ok 675 — uniqueElements() returns []
ok 676 — uniqueElements(null) returns []
ok 677 — uniqueElements(undefined) returns []
ok 678 — uniqueElements('strt') returns ['s', 't', 'r']
ok 679 — uniqueElements(1, 1, 2543, 534, 5) throws an error
ok 680 — uniqueElements({}) throws an error
ok 681 — uniqueElements(true) throws an error
ok 682 — uniqueElements(false) throws an error
ok 683 — uniqueElements([true, 0, 1, false, false, undefined, null]) takes less than 2s to run

#  PASS  test/sortCharactersInString.test.js

ok 684 — sortCharactersInString is a Function
ok 685 — Alphabetically sorts the characters in a string.

#  PASS  test/bottomVisible.test.js

ok 686 — bottomVisible is a Function

#  PASS  test/isUndefined.test.js

ok 687 — isUndefined is a Function
ok 688 — Returns true for undefined

#  PASS  test/observeMutations.test.js

ok 689 — observeMutations is a Function

#  PASS  test/howManyTimes.test.js

ok 690 — howManyTimes is a Function
ok 691 — howManyTimes returns the correct result
ok 692 — howManyTimes returns the correct result
ok 693 — howManyTimes returns the correct result
ok 694 — howManyTimes returns the correct result

#  PASS  test/matches.test.js

ok 695 — matches is a Function
ok 696 — Matches returns true for two similar objects
ok 697 — Matches returns false for two non-similar objects

#  PASS  test/randomIntArrayInRange.test.js

ok 698 — randomIntArrayInRange is a Function
ok 699 — The returned array contains only integers
ok 700 — The returned array has the proper length
ok 701 — The returned array's values lie between provided lowerLimit and upperLimit (both inclusive).

#  PASS  test/pickBy.test.js

ok 702 — pickBy is a Function
ok 703 — Creates an object composed of the properties the given function returns truthy for.

#  PASS  test/isPrimitive.test.js

ok 704 — isPrimitive is a Function
ok 705 — isPrimitive(null) is primitive
ok 706 — isPrimitive(undefined) is primitive
ok 707 — isPrimitive(string) is primitive
ok 708 — isPrimitive(true) is primitive
ok 709 — isPrimitive(50) is primitive
ok 710 — isPrimitive('Hello') is primitive
ok 711 — isPrimitive(false) is primitive
ok 712 — isPrimitive(Symbol()) is primitive
ok 713 — isPrimitive([1, 2, 3]) is not primitive
ok 714 — isPrimitive({ a: 123 }) is not primitive
ok 715 — isPrimitive({ a: 123 }) takes less than 2s to run

#  PASS  test/isNumber.test.js

ok 716 — isNumber is a Function
ok 717 — passed argument is a number
ok 718 — passed argument is not a number

#  PASS  test/matchesWith.test.js

ok 719 — matchesWith is a Function
ok 720 — Returns true for two objects with similar values, based on the provided function

#  PASS  test/average.test.js

ok 721 — average is a Function
ok 722 — average(true) returns 0
ok 723 — average(false) returns 1
ok 724 — average(9, 1) returns 5
ok 725 — average(153, 44, 55, 64, 71, 1122, 322774, 2232, 23423, 234, 3631) returns 32163.909090909092 
ok 726 — average(1, 2, 3) returns 2
ok 727 — average(null) returns 0
ok 728 — average(1, 2, 3) returns NaN
ok 729 — average(String) returns NaN
ok 730 — average({ a: 123}) returns NaN
ok 731 — average([undefined, 0, string]) returns NaN
ok 732 — average([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test/findLastIndex.test.js

ok 733 — findLastIndex is a Function
ok 734 — Finds last index for which the given function returns true

#  PASS  test/coalesce.test.js

ok 735 — coalesce is a Function
ok 736 — Returns the first non-null/undefined argument

#  PASS  test/maxBy.test.js

ok 737 — maxBy is a Function
ok 738 — Produces the right result with a function
ok 739 — Produces the right result with a property name

#  PASS  test/uncurry.test.js

ok 740 — uncurry is a Function
ok 741 — Works without a provided value for n
ok 742 — Works with n = 2
ok 743 — Works with n = 3

#  PASS  test/chunk.test.js

ok 744 — chunk is a Function
ok 745 — chunk([1, 2, 3, 4, 5], 2) returns [[1,2],[3,4],[5]] 
ok 746 — chunk([]) returns []
ok 747 — chunk(123) returns []
ok 748 — chunk({ a: 123}) returns []
ok 749 — chunk(string, 2) returns [ st, ri, ng ]
ok 750 — chunk() throws an error
ok 751 — chunk(undefined) throws an error
ok 752 — chunk(null) throws an error
ok 753 — chunk(This is a string, 2) takes less than 2s to run

#  PASS  test/sortedIndex.test.js

ok 754 — sortedIndex is a Function
ok 755 — Returns the lowest index at which value should be inserted into array in order to maintain its sort order.
ok 756 — Returns the lowest index at which value should be inserted into array in order to maintain its sort order.

#  PASS  test/uniqueSymmetricDifference.test.js

ok 757 — uniqueSymmetricDifference is a Function
ok 758 — Returns the symmetric difference between two arrays.
ok 759 — Does not return duplicates from one array

#  PASS  test/UUIDGeneratorBrowser.test.js

ok 760 — UUIDGeneratorBrowser is a Function

#  PASS  test/collectInto.test.js

ok 761 — collectInto is a Function
ok 762 — Works with multiple promises

#  PASS  test/dropRight.test.js

ok 763 — dropRight is a Function
ok 764 — Returns a new array with n elements removed from the right
ok 765 — Returns a new array with n elements removed from the right
ok 766 — Returns a new array with n elements removed from the right

#  PASS  test/isPromiseLike.test.js

ok 767 — isPromiseLike is a Function
ok 768 — Returns true for a promise-like object
ok 769 — Returns false for an empty object
ok 770 — Returns false for a normal function

#  PASS  test/merge.test.js

ok 771 — merge is a Function
ok 772 — Merges two objects

#  PASS  test/permutations.test.js

ok 773 — permutations is a Function
ok 774 — Generates all permutations of an array

#  PASS  test/binomialCoefficient.test.js

ok 775 — binomialCoefficient is a Function
ok 776 — Returns the appropriate value
ok 777 — Returns the appropriate value
ok 778 — Returns the appropriate value
ok 779 — Returns the appropriate value
ok 780 — Returns the appropriate value
ok 781 — Returns NaN
ok 782 — Returns NaN

#  PASS  test/insertBefore.test.js

ok 783 — insertBefore is a Function
ok 784 — Does not throw error if the element exists

#  PASS  test/elementIsVisibleInViewport.test.js

ok 785 — elementIsVisibleInViewport is a Function

#  PASS  test/toSnakeCase.test.js

ok 786 — toSnakeCase is a Function
ok 787 — toSnakeCase('camelCase') returns camel_case
ok 788 — toSnakeCase('some text') returns some_text
ok 789 — toSnakeCase('some-mixed_string With spaces_underscores-and-hyphens') returns some_mixed_string_with_spaces_underscores_and_hyphens
ok 790 — toSnakeCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') returns i_am_listening_to_fm_while_loading_different_url_on_my_browser_and_also_editing_some_xml_and_html
ok 791 — toSnakeCase() returns undefined
ok 792 — toSnakeCase([]) throws an error
ok 793 — toSnakeCase({}) throws an error
ok 794 — toSnakeCase(123) throws an error
ok 795 — toSnakeCase(IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML) takes less than 2s to run

#  PASS  test/defaults.test.js

ok 796 — defaults is a Function
ok 797 — Assigns default values for undefined properties

#  PASS  test/offset.test.js

ok 798 — offset is a Function
ok 799 — Offset of 0 returns the same array.
ok 800 — Offset > 0 returns the offsetted array.
ok 801 — Offset < 0 returns the reverse offsetted array.
ok 802 — Offset greater than the length of the array returns the same array.
ok 803 — Offset less than the negative length of the array returns the same array.
ok 804 — Offsetting empty array returns an empty array.

#  PASS  test/memoize.test.js

ok 805 — memoize is a Function
ok 806 — Function works properly
ok 807 — Function works properly
ok 808 — Cache stores values

#  PASS  test/all.test.js

ok 809 — all is a Function
ok 810 — Returns true for arrays with no falsey values
ok 811 — Returns false for arrays with 0
ok 812 — Returns false for arrays with NaN
ok 813 — Returns false for arrays with undefined
ok 814 — Returns false for arrays with null
ok 815 — Returns false for arrays with empty strings
ok 816 — Returns true with predicate function
ok 817 — Returns false with a predicate function

#  PASS  test/uniqueElementsBy.test.js

ok 818 — uniqueElementsBy is a Function
ok 819 — uniqueElementsBy works for properties
ok 820 — uniqueElementsBy works for nested properties

#  PASS  test/mapObject.test.js

ok 821 — mapObject is a Function
ok 822 — mapObject([1, 2, 3], a => a * a) returns { 1: 1, 2: 4, 3: 9 }
ok 823 — mapObject([1, 2, 3, 4], (a, b) => b - a) returns { 1: -1, 2: -1, 3: -1, 4: -1 }
ok 824 — mapObject([1, 2, 3, 4], (a, b) => a - b) returns { 1: 1, 2: 1, 3: 1, 4: 1 }

#  PASS  test/promisify.test.js

ok 825 — promisify is a Function
ok 826 — Returns a promise
ok 827 — Runs the function provided

#  PASS  test/union.test.js

ok 828 — union is a Function
ok 829 — union([1, 2, 3], [4, 3, 2]) returns [1, 2, 3, 4]
ok 830 — union('str', 'asd') returns [ 's', 't', 'r', 'a', 'd' ]
ok 831 — union([[], {}], [1, 2, 3]) returns [[], {}, 1, 2, 3]
ok 832 — union([], []) returns []
ok 833 — union() throws an error
ok 834 — union(true, 'str') throws an error
ok 835 — union('false', true) throws an error
ok 836 — union((123, {}) throws an error
ok 837 — union([], {}) throws an error
ok 838 — union(undefined, null) throws an error
ok 839 — union([1, 2, 3], [4, 3, 2]) takes less than 2s to run

#  PASS  test/clampNumber.test.js

ok 840 — clampNumber is a Function
ok 841 — Clamps num within the inclusive range specified by the boundary values a and b

#  PASS  test/words.test.js

ok 842 — words is a Function
ok 843 — words('I love javaScript!!') returns [I, love, javaScript]
ok 844 — words('python, javaScript & coffee') returns [python, javaScript, coffee]
ok 845 — words(I love javaScript!!) returns an array
ok 846 — words() throws an error
ok 847 — words(null) throws an error
ok 848 — words(undefined) throws an error
ok 849 — words({}) throws an error
ok 850 — words([]) throws an error
ok 851 — words(1234) throws an error

#  PASS  test/standardDeviation.test.js

ok 852 — standardDeviation is a Function
ok 853 — Returns the standard deviation of an array of numbers
ok 854 — Returns the standard deviation of an array of numbers

#  PASS  test/isLowerCase.test.js

ok 855 — isLowerCase is a Function
ok 856 — passed string is a lowercase
ok 857 — passed string is a lowercase
ok 858 — passed value is not a lowercase

#  PASS  test/quickSort.test.js

ok 859 — quickSort is a Function
ok 860 — quickSort([5, 6, 4, 3, 1, 2]) returns [1, 2, 3, 4, 5, 6]
ok 861 — quickSort([-1, 0, -2]) returns [-2, -1, 0]
ok 862 — quickSort() throws an error
ok 863 — quickSort(123) throws an error
ok 864 — quickSort({ 234: string}) throws an error
ok 865 — quickSort(null) throws an error
ok 866 — quickSort(undefined) throws an error
ok 867 — quickSort([11, 1, 324, 23232, -1, 53, 2, 524, 32, 13, 156, 133, 62, 12, 4]) takes less than 2s to run

#  PASS  test/isArmstrongNumber.test.js

ok 868 — isArmstrongNumber is a Function
ok 869 — isArmstrongNumber returns true
ok 870 — isArmstrongNumber returns false

#  PASS  test/symmetricDifferenceWith.test.js

ok 871 — symmetricDifferenceWith is a Function
ok 872 — Returns the symmetric difference between two arrays, using a provided function as a comparator

#  PASS  test/call.test.js

ok 873 — call is a Function
ok 874 — Calls function on given object

#  PASS  test/pipeFunctions.test.js

ok 875 — pipeFunctions is a Function
ok 876 — Performs left-to-right function composition

#  PASS  test/bind.test.js

ok 877 — bind is a Function
ok 878 — Binds to an object context

#  PASS  test/rearg.test.js

ok 879 — rearg is a Function
ok 880 — Reorders arguments in invoked function

#  PASS  test/over.test.js

ok 881 — over is a Function
ok 882 — Applies given functions over multiple arguments

#  PASS  test/yesNo.test.js

ok 883 — yesNo is a Function
ok 884 — yesNo(Y) returns true
ok 885 — yesNo(yes) returns true
ok 886 — yesNo(foo, true) returns true
ok 887 — yesNo(No) returns false
ok 888 — yesNo() returns false
ok 889 — yesNo(null) returns false
ok 890 — yesNo(undefined) returns false
ok 891 — yesNo([123, null]) returns false
ok 892 — yesNo([Yes, No]) returns false
ok 893 — yesNo({ 2: Yes }) returns false
ok 894 — yesNo([Yes, No], true) returns true
ok 895 — yesNo({ 2: Yes }, true) returns true

#  PASS  test/bifurcate.test.js

ok 896 — bifurcate is a Function
ok 897 — Splits the collection into two groups

#  PASS  test/on.test.js

ok 898 — on is a Function

#  PASS  test/solveRPN.test.js

ok 899 — solveRPN is a Function
ok 900 — solveRPN returns the correct result
ok 901 — solveRPN returns the correct result

#  PASS  test/percentile.test.js

ok 902 — percentile is a Function
ok 903 — Uses the percentile formula to calculate how many numbers in the given array are less or equal to the given value.

#  PASS  test/pluralize.test.js

ok 904 — pluralize is a Function
ok 905 — Produces the plural of the word
ok 906 — Produces the singular of the word
ok 907 — Produces the plural of the word
ok 908 — Prodices the defined plural of the word
ok 909 — Works with a dictionary

#  PASS  test/shuffle.test.js

ok 910 — shuffle is a Function
ok 911 — Shuffles the array
ok 912 — New array contains all original elements
ok 913 — Works for empty arrays
ok 914 — Works for single-element arrays

#  PASS  test/isObjectLike.test.js

ok 915 — isObjectLike is a Function
ok 916 — Returns true for an object
ok 917 — Returns true for an array
ok 918 — Returns false for a function
ok 919 — Returns false for null

#  PASS  test/currentURL.test.js

ok 920 — currentURL is a Function
ok 921 — currentURL returns the appropriate value

#  PASS  test/objectFromPairs.test.js

ok 922 — objectFromPairs is a Function
ok 923 — Creates an object from the given key-value pairs.

#  PASS  test/CSVToArray.test.js

ok 924 — CSVToArray is a Function
ok 925 — CSVToArray works with default delimiter
ok 926 — CSVToArray works with custom delimiter
ok 927 — CSVToArray omits the first row
ok 928 — CSVToArray omits the first row and works with a custom delimiter

#  PASS  test/pick.test.js

ok 929 — pick is a Function
ok 930 — Picks the key-value pairs corresponding to the given keys from an object.

#  PASS  test/toSafeInteger.test.js

ok 931 — toSafeInteger is a Function
ok 932 — Number(toSafeInteger(3.2)) is a number
ok 933 — Converts a value to a safe integer
ok 934 — toSafeInteger('4.2') returns 4
ok 935 — toSafeInteger(4.6) returns 5
ok 936 — toSafeInteger([]) returns 0
ok 937 — isNaN(toSafeInteger([1.5, 3124])) is true
ok 938 — isNaN(toSafeInteger('string')) is true
ok 939 — isNaN(toSafeInteger({})) is true
ok 940 — isNaN(toSafeInteger()) is true
ok 941 — toSafeInteger(Infinity) returns 9007199254740991
ok 942 — toSafeInteger(3.2) takes less than 2s to run

#  PASS  test/reducedFilter.test.js

ok 943 — reducedFilter is a Function
ok 944 — Filter an array of objects based on a condition while also filtering out unspecified keys.

#  PASS  test/randomIntegerInRange.test.js

ok 945 — randomIntegerInRange is a Function
ok 946 — The returned value is an integer
ok 947 — The returned value lies between provided lowerLimit and upperLimit (both inclusive).

#  PASS  test/forOwn.test.js

ok 948 — forOwn is a Function
ok 949 — Iterates over an element's key-value pairs

#  PASS  test/takeRightWhile.test.js

ok 950 — takeRightWhile is a Function
ok 951 — Removes elements until the function returns true

#  PASS  test/times.test.js

ok 952 — times is a Function
ok 953 — Runs a function the specified amount of times

#  PASS  test/hasClass.test.js

ok 954 — hasClass is a Function

#  PASS  test/maxN.test.js

ok 955 — maxN is a Function
ok 956 — Returns the n maximum elements from the provided array
ok 957 — Returns the n maximum elements from the provided array

#  PASS  test/hexToRGB.test.js

ok 958 — hexToRGB is a Function
ok 959 — Converts a color code to a rgb() or rgba() string
ok 960 — Converts a color code to a rgb() or rgba() string
ok 961 — Converts a color code to a rgb() or rgba() string

#  PASS  test/sdbm.test.js

ok 962 — sdbm is a Function
ok 963 — Hashes the input string into a whole number.

#  PASS  test/pullAtIndex.test.js

ok 964 — pullAtIndex is a Function
ok 965 — Pulls the given values
ok 966 — Pulls the given values

#  PASS  test/unary.test.js

ok 967 — unary is a Function
ok 968 — Discards arguments after the first one

#  PASS  test/isBeforeDate.test.js

ok 969 — isBeforeDate is a Function
ok 970 — isBeforeDate produces the correct result
ok 971 — isBeforeDate produces the correct result

#  PASS  test/partial.test.js

ok 972 — partial is a Function
ok 973 — Prepends arguments

#  PASS  test/bindAll.test.js

ok 974 — bindAll is a Function
ok 975 — Binds to an object context

#  PASS  test/unflattenObject.test.js

ok 976 — unflattenObject is a Function
ok 977 — Unflattens an object with the paths for keys

#  PASS  test/difference.test.js

ok 978 — difference is a Function
ok 979 — Returns the difference between two arrays

#  PASS  test/mask.test.js

ok 980 — mask is a Function
ok 981 — Replaces all but the last num of characters with the specified mask character
ok 982 — Replaces all but the last num of characters with the specified mask character
ok 983 — Replaces all but the last num of characters with the specified mask character

#  PASS  test/btoa.test.js

ok 984 — btoa is a Function
ok 985 — btoa("foobar") equals "Zm9vYmFy"

#  PASS  test/toggleClass.test.js

ok 986 — toggleClass is a Function

#  PASS  test/factorial.test.js

ok 987 — factorial is a Function
ok 988 — Calculates the factorial of 720
ok 989 — Calculates the factorial of 0
ok 990 — Calculates the factorial of 1
ok 991 — Calculates the factorial of 4
ok 992 — Calculates the factorial of 10
ok 993 — Throws TypeError if n < 0

#  PASS  test/composeRight.test.js

ok 994 — composeRight is a Function
ok 995 — Performs left-to-right function composition

#  PASS  test/unionWith.test.js

ok 996 — unionWith is a Function
ok 997 — Produces the appropriate results

#  PASS  test/isBrowserTabFocused.test.js

ok 998 — isBrowserTabFocused is a Function
ok 999 — isBrowserTabFocused is a Function

#  PASS  test/parseCookie.test.js

ok 1000 — parseCookie is a Function
ok 1001 — Parses the cookie

#  PASS  test/copyToClipboard.test.js

ok 1002 — copyToClipboard is a Function

#  PASS  test/once.test.js

ok 1003 — once is a Function
ok 1004 — once is a Function

#  PASS  test/takeRight.test.js

ok 1005 — takeRight is a Function
ok 1006 — Returns an array with n elements removed from the end
ok 1007 — Returns an array with n elements removed from the end

#  PASS  test/objectToPairs.test.js

ok 1008 — objectToPairs is a Function
ok 1009 — Creates an array of key-value pair arrays from an object.

#  PASS  test/stringPermutations.test.js

ok 1010 — stringPermutations is a Function
ok 1011 — Generates all stringPermutations of a string
ok 1012 — Works for single-letter strings
ok 1013 — Works for empty strings

#  PASS  test/spreadOver.test.js

ok 1014 — spreadOver is a Function
ok 1015 — Takes a variadic function and returns a closure that accepts an array of arguments to map to the inputs of the function.

#  PASS  test/forOwnRight.test.js

ok 1016 — forOwnRight is a Function
ok 1017 — Iterates over an element's key-value pairs in reverse

#  PASS  test/geometricProgression.test.js

ok 1018 — geometricProgression is a Function
ok 1019 — Initializes an array containing the numbers in the specified range
ok 1020 — Initializes an array containing the numbers in the specified range
ok 1021 — Initializes an array containing the numbers in the specified range

#  PASS  test/unfold.test.js

ok 1022 — unfold is a Function
ok 1023 — Works with a given function, producing an array

#  PASS  test/formatDuration.test.js

ok 1024 — formatDuration is a Function
ok 1025 — Returns the human readable format of the given number of milliseconds
ok 1026 — Returns the human readable format of the given number of milliseconds (negative)
ok 1027 — Returns the human readable format of the given number of milliseconds

#  PASS  test/setStyle.test.js

ok 1028 — setStyle is a Function

#  PASS  test/getStyle.test.js

ok 1029 — getStyle is a Function

#  PASS  test/runPromisesInSeries.test.js

ok 1030 — runPromisesInSeries is a Function
ok 1031 — Runs promises in series

#  PASS  test/degreesToRads.test.js

ok 1032 — degreesToRads is a Function
ok 1033 — Returns the appropriate value

#  PASS  test/truthCheckCollection.test.js

ok 1034 — truthCheckCollection is a Function
ok 1035 — second argument is truthy on all elements of a collection

#  PASS  test/shank.test.js

ok 1036 — shank is a Function
ok 1037 — Returns an array with the added elements.
ok 1038 — Returns an array with the removed elements.
ok 1039 — Does not mutate the original array

#  PASS  test/tail.test.js

ok 1040 — tail is a Function
ok 1041 — Returns tail
ok 1042 — Returns tail

#  PASS  test/median.test.js

ok 1043 — median is a Function
ok 1044 — Returns the median of an array of numbers
ok 1045 — Returns the median of an array of numbers
ok 1046 — Returns the median of an array of numbers

#  PASS  test/off.test.js

ok 1047 — off is a Function

#  PASS  test/forEachRight.test.js

ok 1048 — forEachRight is a Function
ok 1049 — Iterates over the array in reverse

#  PASS  test/isPlainObject.test.js

ok 1050 — isPlainObject is a Function
ok 1051 — Returns true for a plain object
ok 1052 — Returns false for a Map (example of non-plain object)

#  PASS  test/URLJoin.test.js

ok 1053 — URLJoin is a Function
ok 1054 — Returns proper URL
ok 1055 — Returns proper URL

#  PASS  test/hz.test.js

ok 1056 — hz is a Function
ok 1057 — hz returns a number
ok 1058 — hz returns a number

#  PASS  test/deepClone.test.js

ok 1059 — deepClone is a Function
ok 1060 — Shallow cloning works
ok 1061 — Deep cloning works
ok 1062 — Array shallow cloning works
ok 1063 — Array deep cloning works

#  PASS  test/negate.test.js

ok 1064 — negate is a Function
ok 1065 — Negates a predicate function

#  PASS  test/kmphToMph.test.js

ok 1066 — kmphToMph is a Function
ok 1067 — Returns mph from kph.

#  PASS  test/nest.test.js

ok 1068 — nest is a Function
ok 1069 — Nests items

#  PASS  test/any.test.js

ok 1070 — any is a Function
ok 1071 — Returns true for arrays with at least one truthy value
ok 1072 — Returns false for arrays with no truthy values
ok 1073 — Returns false for arrays with no truthy values
ok 1074 — Returns true with predicate function
ok 1075 — Returns false with a predicate function

#  PASS  test/speechSynthesis.test.js

ok 1076 — speechSynthesis is a Function

#  PASS  test/maxDate.test.js

ok 1077 — maxDate is a Function
ok 1078 — maxDate produces the maximum date

#  PASS  test/isTravisCI.test.js

ok 1079 — isTravisCI is a Function
ok 1080 — Not running on Travis, correctly evaluates

#  PASS  test/getDaysDiffBetweenDates.test.js

ok 1081 — getDaysDiffBetweenDates is a Function
ok 1082 — Returns the difference in days between two dates

#  PASS  test/fibonacci.test.js

ok 1083 — fibonacci is a Function
ok 1084 — Generates an array, containing the Fibonacci sequence

#  PASS  test/isArrayLike.test.js

ok 1085 — isArrayLike is a Function
ok 1086 — Returns true for a string
ok 1087 — Returns true for an array
ok 1088 — Returns false for null

#  PASS  test/curry.test.js

ok 1089 — curry is a Function
ok 1090 — curries a Math.pow
ok 1091 — curries a Math.min

#  PASS  test/isBoolean.test.js

ok 1092 — isBoolean is a Function
ok 1093 — passed value is not a boolean
ok 1094 — passed value is not a boolean

#  PASS  test/RGBToHex.test.js

ok 1095 — RGBToHex is a Function
ok 1096 — Converts the values of RGB components to a color code.

#  PASS  test/isSimilar.test.js

ok 1097 — isSimilar is a Function
ok 1098 — isSimilar returns true
ok 1099 — isSimilar returns false

#  PASS  test/sleep.test.js

ok 1100 — sleep is a Function
ok 1101 — Works as expected

#  PASS  test/dropWhile.test.js

ok 1102 — dropWhile is a Function
ok 1103 — Removes elements in an array until the passed function returns true.

#  PASS  test/factors.test.js

ok 1104 — factors is a Function
ok 1105 — factors returns the correct array
ok 1106 — factors returns the correct array of primes
ok 1107 — factors returns the correct array for negatives
ok 1108 — factors returns the correct array of primes for negatives

#  PASS  test/fibonacciCountUntilNum.test.js

ok 1109 — fibonacciCountUntilNum is a Function
ok 1110 — Returns the correct number

#  PASS  test/toHash.test.js

ok 1111 — toHash is a Function

#  PASS  test/findLastKey.test.js

ok 1112 — findLastKey is a Function
ok 1113 — eturns the appropriate key

#  PASS  test/celsiusToFahrenheit.test.js

ok 1114 — celsiusToFahrenheit is a Function
ok 1115 — 0 Celsius is 32 Fahrenheit
ok 1116 — 100 Celsius is 212 Fahrenheit
ok 1117 — -50 Celsius is -58 Fahrenheit
ok 1118 — 1000 Celsius is 1832 Fahrenheit
ok 1119 — Not a number value is NaN

#  PASS  test/intersection.test.js

ok 1120 — intersection is a Function
ok 1121 — Returns a list of elements that exist in both arrays

#  PASS  test/pullBy.test.js

ok 1122 — pullBy is a Function
ok 1123 — Pulls the specified values

#  PASS  test/hashBrowser.test.js

ok 1124 — hashBrowser is a Function

#  PASS  test/colorize.test.js

ok 1125 — colorize is a Function
ok 1126 — Returns the appropriate value

#  PASS  test/approximatelyEqual.test.js

ok 1127 — approximatelyEqual is a Function
ok 1128 — Works for PI / 2
ok 1129 — Works for 0.1 + 0.2 === 0.3
ok 1130 — Works for exactly equal values
ok 1131 — Works for a custom epsilon

#  PASS  test/prettyBytes.test.js

ok 1132 — prettyBytes is a Function
ok 1133 — Converts a number in bytes to a human-readable string.
ok 1134 — Converts a number in bytes to a human-readable string.
ok 1135 — Converts a number in bytes to a human-readable string.

#  PASS  test/isAfterDate.test.js

ok 1136 — isAfterDate is a Function
ok 1137 — isAfterDate produces the correct result
ok 1138 — isBeforeDate produces the correct result

#  PASS  test/none.test.js

ok 1139 — none is a Function
ok 1140 — Returns true for arrays with no truthy values
ok 1141 — Returns false for arrays with at least one truthy value
ok 1142 — Returns true with a predicate function
ok 1143 — Returns false with predicate function

#  PASS  test/initial.test.js

ok 1144 — initial is a Function
ok 1145 — Returns all the elements of an array except the last one

#  PASS  test/randomHexColorCode.test.js

ok 1146 — randomHexColorCode is a Function
ok 1147 — randomHexColorCode has to proper length
ok 1148 — The color code starts with "#"
ok 1149 — The color code contains only valid hex-digits

#  PASS  test/runAsync.test.js

ok 1150 — runAsync is a Function

#  PASS  test/isUpperCase.test.js

ok 1151 — isUpperCase is a Function
ok 1152 — ABC is all upper case
ok 1153 — abc is not all upper case
ok 1154 — A3@$ is all uppercase

#  PASS  test/compact.test.js

ok 1155 — compact is a Function
ok 1156 — Removes falsey values from an array

#  PASS  test/everyNth.test.js

ok 1157 — everyNth is a Function
ok 1158 — Returns every nth element in an array

#  PASS  test/binarySearch.test.js

ok 1159 — binarySearch is a Function
ok 1160 — Finds item in array
ok 1161 — Returns -1 when not found
ok 1162 — Works with empty arrays
ok 1163 — Works for one element arrays

#  PASS  test/isReadableStream.test.js

ok 1164 — isReadableStream is a Function
ok 1165 — isReadableStream returns true for read streams
ok 1166 — isReadableStream returns false for write streams
ok 1167 — isReadableStream returns true for duplex streams
ok 1168 — isReadableStream returns false for non-streams

#  PASS  test/UUIDGeneratorNode.test.js

ok 1169 — UUIDGeneratorNode is a Function
ok 1170 — Contains dashes in the proper places
ok 1171 — Only contains hexadecimal digits

#  PASS  test/coalesceFactory.test.js

ok 1172 — coalesceFactory is a Function
ok 1173 — Returns a customized coalesce function

#  PASS  test/differenceBy.test.js

ok 1174 — differenceBy is a Function
ok 1175 — Works using a native function and numbers
ok 1176 — Works with arrow function and objects

#  PASS  test/httpDelete.test.js

ok 1177 — httpDelete is a Function

#  PASS  test/nodeListToArray.test.js

ok 1178 — nodeListToArray is a Function

#  PASS  test/isAbsoluteURL.test.js

ok 1179 — isAbsoluteURL is a Function
ok 1180 — Given string is an absolute URL
ok 1181 — Given string is an absolute URL
ok 1182 — Given string is not an absolute URL

#  PASS  test/createElement.test.js

ok 1183 — createElement is a Function
ok 1184 — createElement creates an element

#  PASS  test/randomNumberInRange.test.js

ok 1185 — randomNumberInRange is a Function
ok 1186 — The returned value is a number
ok 1187 — The returned value lies between provided lowerLimit and upperLimit (both inclusive).

#  PASS  test/minN.test.js

ok 1188 — minN is a Function
ok 1189 — Returns the n minimum elements from the provided array
ok 1190 — Returns the n minimum elements from the provided array

1..1190

# Test Suites: 100% ██████████, 361 passed, 361 total
# Tests:       100% ██████████, 1190 passed, 1190 total
# Time:        86.127s, estimated 83s

# Ran all test suites.

